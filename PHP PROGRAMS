ANSWER:01
INPUT:

<?php
$capital = 67;
print("Variable capital is $capital");
print("Variable capital is $capital");
?>
OUPUT:
Variable capital is 67Variable capital is 67

=== Code Execution Successful ===



ANSWER-02
INPUT:
<?php
// Set table size
$size = 3;

// Print header row
echo "  ";
for ($col = 1; $col <= $size; $col++) {
    echo "$col ";
}
echo "\n";

// Print division values row by row
for ($row = 1; $row <= $size; $row++) {
    echo "$row ";
    for ($col = 1; $col <= $size; $col++) {
        $result = round($row / $col, 2);
        echo "$result ";
    }
    echo "\n";
}
?>

OUPUT:
  1 2 3 
1 1 0.5 0.33 
2 2 1 0.67 
3 3 1.5 1 


=== Code Execution Successful ===

ANSWER 04:
INPUT:

<?php
$animal = "antelope"; 
$animal_heads = 1; 
$animal_legs = 4;

echo "The $animal has $animal_heads head(s).";
echo "The $animal has $animal_legs leg(s).";
?>

OUTPUT:
The antelope has 1 head(s).The antelope has 4 leg(s).

=== Code Execution Successful ===

ANSWER 05
INPUT:

<html>
<head>
    <title>Purchase Calculator</title>
</head>
<body>
    <h2>Purchase Cost Calculator</h2>

    <form method="post">
        <h3>Item 1</h3>
        Price: <input type="number" name="price1" step="0.01" required>  
        Quantity: <input type="number" name="qty1" required><br><br>

        <h3>Item 2</h3>
        Price: <input type="number" name="price2" step="0.01" required>  
        Quantity: <input type="number" name="qty2" required><br><br>

        <h3>Item 3</h3>
        Price: <input type="number" name="price3" step="0.01" required>  
        Quantity: <input type="number" name="qty3" required><br><br>

        <input type="submit" name="calculate" value="Calculate">
    </form>

    <?php
    if (isset($_POST['calculate'])) {
        // Get input values
        $price1 = $_POST['price1'];
        $qty1 = $_POST['qty1'];
        $price2 = $_POST['price2'];
        $qty2 = $_POST['qty2'];
        $price3 = $_POST['price3'];
        $qty3 = $_POST['qty3'];

        // Calculate subtotal
        $subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);

        // Calculate tax (10%)
        $tax = $subtotal * 0.10;

        // Calculate total cost
        $total = $subtotal + $tax;

        // Display results
        echo "<h3>Results:</h3>";
        echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
        echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
        echo "Total Cost: ₹" . number_format($total, 2) . "<br>";
    }
    ?>
</body>
</html>

ANSWER 06:
INPUT:

<?php
session_start(); // Start the session

// Set session variables when the page first loads
if (!isset($_SESSION['session_name'])) {
    $_SESSION['session_name'] = "Harsha";
    $_SESSION['session_age'] = 22;
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>PHP Data Passing Methods</title>
</head>
<body>
    <h2>Passing Data Between Pages (Single Page Demo)</h2>

    <!-- GET Method -->
    <h3>1. GET Method</h3>
    <a href="?method=get&get_name=Harsha&get_age=22">Send Data via GET</a>

    <hr>

    <!-- POST Method -->
    <h3>2. POST Method</h3>
    <form method="post" action="?method=post">
        Name: <input type="text" name="post_name" value="Harsha"><br>
        Age: <input type="number" name="post_age" value="22"><br>
        <input type="submit" value="Send via POST">
    </form>

    <hr>

    <!-- SESSION Method -->
    <h3>3. SESSION Method</h3>
    <p>Session variables have been set. Click below to view them.</p>
    <a href="?method=session">View SESSION Data</a>

    <hr>

    <!-- Display Results -->
    <?php
    if (isset($_GET['method']) && $_GET['method'] == "get" && isset($_GET['get_name']) && isset($_GET['get_age'])) {
        echo "<h3>GET Method Result</h3>";
        echo "Name: " . htmlspecialchars($_GET['get_name']) . "<br>";
        echo "Age: " . htmlspecialchars($_GET['get_age']) . "<br>";
    }

    if (isset($_GET['method']) && $_GET['method'] == "post" && isset($_POST['post_name']) && isset($_POST['post_age'])) {
        echo "<h3>POST Method Result</h3>";
        echo "Name: " . htmlspecialchars($_POST['post_name']) . "<br>";
        echo "Age: " . htmlspecialchars($_POST['post_age']) . "<br>";
    }

    if (isset($_GET['method']) && $_GET['method'] == "session") {
        echo "<h3>SESSION Method Result</h3>";
        echo "Name: " . $_SESSION['session_name'] . "<br>";
        echo "Age: " . $_SESSION['session_age'] . "<br>";
    }
    ?>
</body>
</html>


ANSWER 07:
INPUT:

<!DOCTYPE html>
<html>
<head>
    <title>Greeting Form</title>
</head>
<body>
    <h2>User Greeting Form</h2>

    <form method="post">
        Enter Your Name: <input type="text" name="username">
        <input type="submit" value="Submit">
    </form>

    <hr>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $name = trim($_POST['username']); // Remove extra spaces

        if (empty($name)) {
            echo "<p style='color:red;'>Error: Please enter your name.</p>";
        } else {
            echo "<h3>Hello, Welcome to Everyone!</h3>";
            echo "<p>Have a nice day!!</p>";
        }
    }
    ?>
</body>
</html>


ANSWER 08:
INPUT:
<!DOCTYPE html>
<html>
<head>
    <title>Best Soft Drink Deal</title>
</head>
<body>
    <h2>Soft Drink Price Comparison</h2>

    <form method="post">
        <h3>Drink A</h3>
        Cost (Rs): <input type="number" name="costA" step="0.01" required>
        Size (L): <input type="number" name="sizeA" step="0.01" required><br><br>

        <h3>Drink B</h3>
        Cost (Rs): <input type="number" name="costB" step="0.01" required>
        Size (L): <input type="number" name="sizeB" step="0.01" required><br><br>

        <input type="submit" name="compare" value="Compare Drinks">
    </form>

    <hr>

    <?php
    function deal($costA, $sizeA, $costB, $sizeB) {
        $costPerLiterA = $costA / $sizeA;
        $costPerLiterB = $costB / $sizeB;

        echo "Drink A: Rs.$costA for $sizeA L → Rs." . round($costPerLiterA, 2) . " per L<br>";
        echo "Drink B: Rs.$costB for $sizeB L → Rs." . round($costPerLiterB, 2) . " per L<br><br>";

        if ($costPerLiterA < $costPerLiterB) {
            echo "<strong>Choose Drink A to save money!</strong>";
        } elseif ($costPerLiterB < $costPerLiterA) {
            echo "<strong>Choose Drink B to save money!</strong>";
        } else {
            echo "<strong>Both drinks cost the same per liter.</strong>";
        }
    }

    if (isset($_POST['compare'])) {
        $costA = (float) $_POST['costA'];
        $sizeA = (float) $_POST['sizeA'];
        $costB = (float) $_POST['costB'];
        $sizeB = (float) $_POST['sizeB'];

        deal($costA, $sizeA, $costB, $sizeB);
    }
    ?>
</body>
</html>

ANSWER 09:
INPUT:

<?php
// ----------------------------
// 1. Purchase Calculator
// ----------------------------
if (isset($_POST['price1'])) {
    $price1 = $_POST['price1'];
    $qty1 = $_POST['qty1'];
    $price2 = $_POST['price2'];
    $qty2 = $_POST['qty2'];
    $price3 = $_POST['price3'];
    $qty3 = $_POST['qty3'];

    $subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
    $tax = $subtotal * 0.10;
    $total = $subtotal + $tax;

    echo "<h3>Purchase Results:</h3>";
    echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
    echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
    echo "Total Cost: ₹" . number_format($total, 2) . "<br><hr>";
}
?>

<!-- Purchase Calculator Form -->
<form method="post">
    <h3>Purchase Calculator</h3>
    Item 1 Price: <input type="number" step="0.01" name="price1" required>
    Qty: <input type="number" name="qty1" required><br>
    Item 2 Price: <input type="number" step="0.01" name="price2" required>
    Qty: <input type="number" name="qty2" required><br>
    Item 3 Price: <input type="number" step="0.01" name="price3" required>
    Qty: <input type="number" name="qty3" required><br>
    <input type="submit" value="Calculate">
</form>
<hr>

<?php
// ----------------------------
// 2. Greeting Form
// ----------------------------
if (isset($_POST['username'])) {
    $name = trim($_POST['username']);
    if ($name === "") {
        echo "<p style='color:red;'>Error: Name field cannot be blank.</p><hr>";
    } else {
        echo "<p>Hello, Welcome to Everyone!</p>";
        echo "<p>Have a nice day!!</p><hr>";
    }
}
?>

<!-- Greeting Form -->
<form method="post">
    <h3>Greeting Form</h3>
    Enter your name: <input type="text" name="username">
    <input type="submit" value="Greet Me">
</form>
<hr>

<?php
// ----------------------------
// 3. Drink Deal Function
// ----------------------------
function deal($costA, $sizeA, $costB, $sizeB) {
    $valueA = $costA / $sizeA;
    $valueB = $costB / $sizeB;

    if ($valueA < $valueB) {
        return "Drink A is a better deal.";
    } elseif ($valueB < $valueA) {
        return "Drink B is a better deal.";
    } else {
        return "Both drinks offer the same value.";
    }
}

echo "<h3>Drink Deal Result:</h3>";
echo deal(25, 11, 23, 9);
echo "<hr>";

// ----------------------------
// 4. Variable Interpolation Snippet
// ----------------------------
$thisVar = "this";
$that = "that";
$the_other = 2.2000000000;

echo "<h3>Variable Interpolation Output:</h3>";
echo "$thisVar,$not_set,$that+$the_other"; // Will give undefined variable notice for $not_set
?>


ANSWER 10:
INPUT:

<?php
// ------------------ 1. PURCHASE CALCULATOR ------------------
echo "<h2>Purchase Calculator</h2>";
$price1 = 50; $qty1 = 2;
$price2 = 30; $qty2 = 3;
$price3 = 20; $qty3 = 4;

$subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
$tax = $subtotal * 0.10;
$total = $subtotal + $tax;

echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
echo "Total Cost: ₹" . number_format($total, 2) . "<br><hr>";

// ------------------ 2. PASSING INFO BETWEEN PAGES (Simulated) ------------------
echo "<h2>Passing Info Between Pages Example</h2>";
$name = "Harshada"; // normally from form POST
echo "Hello, $name! This data could be passed using POST, GET, or SESSION.<hr>";

// ------------------ 3. GREETING FORM ------------------
echo "<h2>Greeting Form</h2>";
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['greet_name'])) {
    $user_name = trim($_POST['greet_name']);
    if ($user_name == "") {
        echo "<p style='color:red;'>Error: Name cannot be blank.</p>";
    } else {
        echo "Hello, Welcome to Everyone!<br>Have a nice day, $user_name!!<br>";
    }
}
?>
<form method="post">
    Enter your name: <input type="text" name="greet_name">
    <input type="submit" value="Greet Me">
</form>
<hr>

<?php
// ------------------ 4. SOFT DRINK COMPARISON ------------------
echo "<h2>Soft Drink Comparison</h2>";
function deal($cost, $size) {
    return $cost / $size;
}

$drinkA = deal(25, 11);
$drinkB = deal(23, 9);

echo "Cost per liter of Drink A: ₹" . number_format($drinkA, 2) . "<br>";
echo "Cost per liter of Drink B: ₹" . number_format($drinkB, 2) . "<br>";

if ($drinkA < $drinkB) {
    echo "Choose Drink A to save money!<br>";
} else {
    echo "Choose Drink B to save money!<br>";
}
echo "<hr>";

// ------------------ 5. PREDICT OUTPUT SNIPPET ------------------
echo "<h2>Predict Output Snippet</h2>";
$thisVar = "this"; 
$that = "that"; 
$the_other = 2.2000000000;
print("$thisVar, , " . ($that + $the_other)); 
echo "<hr>";

// ------------------ 6. STUDENT GRADE CALCULATION ------------------
echo "<h2>Student Grades</h2>";
$students = [
    "Ananya" => 92,
    "Rahul"  => 78,
    "Priya"  => 65,
    "Vikram" => 48,
    "Meera"  => 33
];

foreach ($students as $name => $marks) {
    if ($marks >= 90) {
        $grade = "A+";
    } elseif ($marks >= 80) {
        $grade = "A";
    } elseif ($marks >= 70) {
        $grade = "B";
    } elseif ($marks >= 60) {
        $grade = "C";
    } elseif ($marks >= 50) {
        $grade = "D";
    } else {
        $grade = "F (Fail)";
    }
    echo "Student: $name | Marks: $marks | Grade: $grade <br>";
}
?>


ANSWER 11:
INPUT:

<?php
// Get the current day number (1 for Monday, 7 for Sunday)
$dayNumber = date("N");

echo "<h2>Today is:</h2>";

switch ($dayNumber) {
    case 1:
        echo "Monday";
        break;
    case 2:
        echo "Tuesday";
        break;
    case 3:
        echo "Wednesday";
        break;
    case 4:
        echo "Thursday";
        break;
    case 5:
        echo "Friday";
        break;
    case 6:
        echo "Saturday";
        break;
    case 7:
        echo "Sunday";
        break;
    default:
        echo "Invalid day number!";
}
?>


ANSWER 12:
INPUT:

<!DOCTYPE html>
<html>
<head>
    <title>Student Grade Checker</title>
</head>
<body>
    <h2>Check Student Grade</h2>

    <form method="post">
        Enter Marks (%): <input type="number" name="marks" min="0" max="100" step="0.01">
        <input type="submit" value="Check Grade">
    </form>

    <hr>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $marks = $_POST['marks'];

        if (!is_numeric($marks) || $marks < 0 || $marks > 100) {
            echo "<p style='color:red;'>Error: Please enter valid marks between 0 and 100.</p>";
        } else {
            if ($marks >= 75) {
                echo "<p>Grade: <strong>First Class</strong></p>";
            } elseif ($marks >= 60) {
                echo "<p>Grade: <strong>Second Class</strong></p>";
            } elseif ($marks >= 40) {
                echo "<p>Grade: <strong>Third Class</strong></p>";
            } else {
                echo "<p>Grade: <strong>Fail</strong></p>";
            }
        }
    }
    ?>
</body>
</html>


ANSWER 13:
INPUT:

<?php
// --- 1. Purchase Cost Calculator ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['item1_price'])) {
    $price1 = $_POST['item1_price'];
    $qty1 = $_POST['item1_qty'];
    $price2 = $_POST['item2_price'];
    $qty2 = $_POST['item2_qty'];
    $price3 = $_POST['item3_price'];
    $qty3 = $_POST['item3_qty'];

    $subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
    $tax = $subtotal * 0.10;
    $total = $subtotal + $tax;

    echo "<h3>Results:</h3>";
    echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
    echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
    echo "Total Cost: ₹" . number_format($total, 2) . "<br><hr>";
}
?>

<!-- Purchase Cost Form -->
<form method="post">
    <h3>Purchase Calculator</h3>
    Item 1 Price: <input type="number" name="item1_price" step="0.01"> Quantity: <input type="number" name="item1_qty"><br>
    Item 2 Price: <input type="number" name="item2_price" step="0.01"> Quantity: <input type="number" name="item2_qty"><br>
    Item 3 Price: <input type="number" name="item3_price" step="0.01"> Quantity: <input type="number" name="item3_qty"><br>
    <input type="submit" value="Calculate">
</form>
<hr>

<?php
// --- 2. Greeting Form ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['username'])) {
    $name = trim($_POST['username']);
    if ($name == "") {
        echo "Error: Name field cannot be blank.<hr>";
    } else {
        echo "Hello, Welcome to $name!<br>Have a nice day!!<hr>";
    }
}
?>

<form method="post">
    <h3>Greeting Form</h3>
    Enter your name: <input type="text" name="username">
    <input type="submit" value="Greet Me">
</form>
<hr>

<?php
// --- 3. Soft Drink Comparison Function ---
function deal($price, $size) {
    return $price / $size; // price per liter
}

$drinkA = deal(25, 11);
$drinkB = deal(23, 9);

echo "<h3>Soft Drink Comparison</h3>";
if ($drinkA < $drinkB) {
    echo "Drink A is cheaper per liter.<hr>";
} else {
    echo "Drink B is cheaper per liter.<hr>";
}

// --- 4. Predict Output Snippet ---
$thisVar = "this";
$that = "that";
$the_other = 2.2000000000;
echo "<h3>Predict Output</h3>";
echo "$thisVar,,";
echo $that + $the_other; // "that" is treated as 0 in numeric context
echo "<hr>";

// --- 5. Student Grade Checker (Loop) ---
$marksArray = [85, 65, 50, 30];
echo "<h3>Student Grades</h3>";
foreach ($marksArray as $marks) {
    if ($marks >= 75) {
        echo "Marks: $marks → First Class<br>";
    } elseif ($marks >= 60) {
        echo "Marks: $marks → Second Class<br>";
    } elseif ($marks >= 40) {
        echo "Marks: $marks → Third Class<br>";
    } else {
        echo "Marks: $marks → Fail<br>";
    }
}
echo "<hr>";

// --- 6. Days of the Week using Switch ---
$dayNumber = 3; // Example: Wednesday
echo "<h3>Day of the Week</h3>";
switch ($dayNumber) {
    case 1: echo "Monday"; break;
    case 2: echo "Tuesday"; break;
    case 3: echo "Wednesday"; break;
    case 4: echo "Thursday"; break;
    case 5: echo "Friday"; break;
    case 6: echo "Saturday"; break;
    case 7: echo "Sunday"; break;
    default: echo "Invalid Day Number";
}
echo "<hr>";

// --- 7. substr() Example ---
$sub = substr("12345", 2, 2);
echo "<h3>substr() Example</h3>";
echo "sub is $sub<hr>";
?>

ANSWER 14:
INPUT:

<?php
// -------------------- 1. Purchase Calculator --------------------
if (isset($_POST['price1'])) {
    $subtotal = ($_POST['price1'] * $_POST['qty1']) +
                ($_POST['price2'] * $_POST['qty2']) +
                ($_POST['price3'] * $_POST['qty3']);
    $tax = $subtotal * 0.10;
    $total = $subtotal + $tax;
    echo "<h3>Purchase Calculator</h3>";
    echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
    echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
    echo "Total Cost: ₹" . number_format($total, 2) . "<br><hr>";
}

// -------------------- 2. Greeting with Name --------------------
if (isset($_POST['username'])) {
    $name = trim($_POST['username']);
    if ($name == "") {
        echo "<p style='color:red;'>Error: Name cannot be blank.</p>";
    } else {
        echo "<p>Hello, Welcome to Everyone!</p>";
        echo "<p>Have a nice day!!</p><hr>";
    }
}

// -------------------- 3. Soft Drink Deal --------------------
function deal() {
    $costA = 25 / 1.1; // Rs per liter for Drink A
    $costB = 23 / 0.9; // Rs per liter for Drink B
    if ($costA < $costB) {
        return "Choose Drink A to save money.";
    } else {
        return "Choose Drink B to save money.";
    }
}
echo "<h3>Soft Drink Deal</h3>" . deal() . "<hr>";

// -------------------- 4. Predict Output Example --------------------
$thisVar = "this"; 
$that = "that"; 
$the_other = 2.2;
echo "<h3>Predict Output</h3>";
echo "$thisVar,, " . ($that + $the_other) . "<br><hr>";

// -------------------- 5. Student Grade Check --------------------
if (isset($_POST['marks'])) {
    $marks = $_POST['marks'];
    if ($marks >= 75) {
        $grade = "First Class";
    } elseif ($marks >= 60) {
        $grade = "Second Class";
    } elseif ($marks >= 40) {
        $grade = "Third Class";
    } else {
        $grade = "Fail";
    }
    echo "<h3>Grade Check</h3>";
    echo "Marks: $marks% → Grade: $grade<hr>";
}

// -------------------- 6. Days of the Week --------------------
if (isset($_POST['daynum'])) {
    switch ($_POST['daynum']) {
        case 1: $day = "Monday"; break;
        case 2: $day = "Tuesday"; break;
        case 3: $day = "Wednesday"; break;
        case 4: $day = "Thursday"; break;
        case 5: $day = "Friday"; break;
        case 6: $day = "Saturday"; break;
        case 7: $day = "Sunday"; break;
        default: $day = "Invalid day number";
    }
    echo "<h3>Day of the Week</h3>$day<hr>";
}

// -------------------- 7. Substring Example --------------------
$sub = substr("12345", 2, 2);
echo "<h3>Substring Example</h3>sub is $sub<hr>";

// -------------------- 8. Name, Email, Message Form --------------------
if (isset($_POST['name_form'])) {
    $uname = htmlspecialchars($_POST['name_form']);
    $email = htmlspecialchars($_POST['email_form']);
    $msg = htmlspecialchars($_POST['msg_form']);
    echo "<h3>Form Confirmation</h3>";
    echo "Thank you, $uname!<br>";
    echo "We have received your message: '$msg'<br>";
    echo "A confirmation has been sent to your email: $email<hr>";
}
?>

<!-- HTML Forms -->
<h2>Purchase Calculator</h2>
<form method="post">
    Price1: <input type="number" step="0.01" name="price1">
    Qty1: <input type="number" name="qty1"><br>
    Price2: <input type="number" step="0.01" name="price2">
    Qty2: <input type="number" name="qty2"><br>
    Price3: <input type="number" step="0.01" name="price3">
    Qty3: <input type="number" name="qty3"><br>
    <button type="submit">Calculate</button>
</form>
<hr>

<h2>Greeting</h2>
<form method="post">
    Enter your name: <input type="text" name="username">
    <button type="submit">Submit</button>
</form>
<hr>

<h2>Grade Checker</h2>
<form method="post">
    Enter Marks (%): <input type="number" name="marks" min="0" max="100">
    <button type="submit">Check Grade</button>
</form>
<hr>

<h2>Days of the Week</h2>
<form method="post">
    Enter Day Number (1-7): <input type="number" name="daynum" min="1" max="7">
    <button type="submit">Show Day</button>
</form>
<hr>

<h2>Name, Email, Message Form</h2>
<form method="post">
    Name: <input type="text" name="name_form"><br>
    Email: <input type="email" name="email_form"><br>
    Message: <textarea name="msg_form"></textarea><br>
    <button type="submit">Send</button>
</form>

ANSWER 15:
INPUT:

<!DOCTYPE html>
<html>
<head>
    <title>Sum of Digits</title>
</head>
<body>

<h2>Sum of Digits Calculator</h2>
<form method="post">
    Enter a number: <input type="number" name="number" required>
    <input type="submit" value="Calculate">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $number = $_POST['number'];
    $sum = 0;
    $temp = $number;

    while ($temp > 0) {
        $digit = $temp % 10;  // Get last digit
        $sum += $digit;       // Add to sum
        $temp = (int)($temp / 10); // Remove last digit
    }

    echo "<h3>The sum of digits of $number is: $sum</h3>";
}
?>

</body>
</html>

ANSWER 16:
INPUT:
<?php
// sum.php

// Function that takes two numbers and returns their sum
function sum($a, $b) {
    return $a + $b;
}

// Initialize variables
$result = null;
$error = '';

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Use HTML form input type="number" and cast to float to accept integers/floats
    // Trim to avoid whitespace issues
    $rawA = isset($_POST['num1']) ? trim($_POST['num1']) : '';
    $rawB = isset($_POST['num2']) ? trim($_POST['num2']) : '';

    // Basic validation: ensure inputs are numeric
    if ($rawA === '' || $rawB === '') {
        $error = 'Please enter both numbers.';
    } elseif (!is_numeric($rawA) || !is_numeric($rawB)) {
        $error = 'Both inputs must be valid numbers.';
    } else {
        // Cast to float (use (int) if you want integers only)
        $a = (float) $rawA;
        $b = (float) $rawB;
        $result = sum($a, $b);
    }
}
?>
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Sum Two Numbers</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    body { font-family: Arial, sans-serif; padding: 2rem; max-width: 520px; margin:auto; }
    label { display:block; margin-top:1rem; }
    input[type="number"] { width:100%; padding:0.5rem; font-size:1rem; }
    button { margin-top:1rem; padding:0.6rem 1rem; font-size:1rem; }
    .result { margin-top:1rem; font-weight:600; }
    .error { color: #b00020; margin-top:0.8rem; }
  </style>
</head>
<body>

  <h1>Sum Two Numbers</h1>

  <form method="post" action="">
    <label>
      Number 1:
      <input type="number" name="num1" step="any" required value="<?php echo isset($_POST['num1']) ? htmlspecialchars($_POST['num1']) : ''; ?>">
    </label>

    <label>
      Number 2:
      <input type="number" name="num2" step="any" required value="<?php echo isset($_POST['num2']) ? htmlspecialchars($_POST['num2']) : ''; ?>">
    </label>

    <button type="submit">Calculate Sum</button>
  </form>

  <?php if ($error): ?>
    <div class="error"><?php echo htmlspecialchars($error); ?></div>
  <?php elseif ($result !== null): ?>
    <div class="result">Result: <?php echo $result; ?></div>
  <?php endif; ?>

</body>
</html>


ANSWER 17:
INPUT:

<?php
// ------------------- PART 1: SUM FUNCTION -------------------
function sum($a, $b) {
    return $a + $b;
}

$sumResult = null;
$sumError = '';

if (isset($_POST['calculate_sum'])) {
    $num1 = trim($_POST['num1']);
    $num2 = trim($_POST['num2']);

    if ($num1 === '' || $num2 === '') {
        $sumError = 'Please enter both numbers.';
    } elseif (!is_numeric($num1) || !is_numeric($num2)) {
        $sumError = 'Both inputs must be valid numbers.';
    } else {
        $sumResult = sum((float)$num1, (float)$num2);
    }
}

// ------------------- PART 2: BANK TRANSACTION SIMULATION -------------------
$customerName = "Harsha";
$balance = 5000;

// Deposit function
function deposit($amount, &$balance) {
    if ($amount > 0) {
        $balance += $amount;
        return "Deposited ₹$amount successfully.";
    } else {
        return "Invalid deposit amount.";
    }
}

// Withdraw function
function withdraw($amount, &$balance) {
    if ($amount <= 0) {
        return "Invalid withdrawal amount.";
    } elseif ($amount > $balance) {
        return "Insufficient funds. Current balance: ₹$balance";
    } else {
        $balance -= $amount;
        return "Withdrew ₹$amount successfully.";
    }
}

// Example transactions
$transactions = [
    ["type" => "deposit", "amount" => 1500],
    ["type" => "withdraw", "amount" => 2000],
    ["type" => "withdraw", "amount" => 6000],
    ["type" => "deposit", "amount" => -500],
    ["type" => "withdraw", "amount" => 1000]
];

$transactionLogs = [];
foreach ($transactions as $t) {
    switch ($t["type"]) {
        case "deposit":
            $transactionLogs[] = deposit($t["amount"], $balance);
            break;
        case "withdraw":
            $transactionLogs[] = withdraw($t["amount"], $balance);
            break;
        default:
            $transactionLogs[] = "Invalid transaction type.";
    }
    $transactionLogs[] = "Current Balance: ₹$balance";
}

if ($balance >= 10000) {
    $transactionLogs[] = "You have a high balance!";
} elseif ($balance >= 5000) {
    $transactionLogs[] = "Your balance is healthy.";
} else {
    $transactionLogs[] = "Low balance warning!";
}
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>PHP Sum & Bank Transactions</title>
<style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    h2 { color: #333; }
    .section { margin-bottom: 40px; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }
    input, button { padding: 8px; font-size: 1rem; margin-top: 5px; }
    .result { font-weight: bold; margin-top: 10px; }
    .error { color: red; }
</style>
</head>
<body>

<!-- PART 1: Sum Calculator -->
<div class="section">
    <h2>Sum of Two Numbers</h2>
    <form method="post">
        <label>Number 1: <input type="number" name="num1" step="any" required value="<?php echo isset($_POST['num1']) ? htmlspecialchars($_POST['num1']) : ''; ?>"></label><br>
        <label>Number 2: <input type="number" name="num2" step="any" required value="<?php echo isset($_POST['num2']) ? htmlspecialchars($_POST['num2']) : ''; ?>"></label><br>
        <button type="submit" name="calculate_sum">Calculate Sum</button>
    </form>
    <?php
    if ($sumError) {
        echo "<div class='error'>$sumError</div>";
    } elseif ($sumResult !== null) {
        echo "<div class='result'>Result: $sumResult</div>";
    }
    ?>
</div>

<!-- PART 2: Bank Transaction Simulation -->
<div class="section">
    <h2>Bank Transaction Simulation</h2>
    <p><strong>Customer Name:</strong> <?php echo $customerName; ?></p>
    <p><strong>Initial Balance:</strong> ₹5000</p>
    <hr>
    <?php
    foreach ($transactionLogs as $log) {
        echo $log . "<br>";
    }
    ?>
</div>

</body>
</html>


ANSWER 18:
INPUT:

<?php
// ------------------ Part 1: Basic isset() Example ------------------
$var1 = "Hello";
$var2 = null;

echo "<h2>Basic isset() Check</h2>";

if (isset($var1)) {
    echo "var1 is set.<br>";
} else {
    echo "var1 is NOT set or is NULL.<br>";
}

if (isset($var2)) {
    echo "var2 is set.<br>";
} else {
    echo "var2 is NOT set or is NULL.<br>";
}

if (isset($var1, $var2)) {
    echo "Both variables are set.<br>";
} else {
    echo "At least one variable is not set or is NULL.<br>";
}

// ------------------ Part 2: isset() in Form Handling ------------------
echo "<hr><h2>Form Handling with isset()</h2>";

if (isset($_POST['username'])) {
    $username = trim($_POST['username']);
    if ($username !== "") {
        echo "Username entered: " . htmlspecialchars($username) . "<br>";
    } else {
        echo "Username field is empty.<br>";
    }
} else {
    echo "Please enter your username below.<br>";
}
?>

<!-- HTML Form -->
<form method="post">
    <input type="text" name="username" placeholder="Enter name">
    <button type="submit">Submit</button>
</form>

ANSWER 19:
INPUT:

<?php
// ------------------ Part 1: isset() Example ------------------
$var1 = "Hello";
$var2 = null;

$issetOutput = [];
if (isset($var1)) {
    $issetOutput[] = "var1 is set.";
} else {
    $issetOutput[] = "var1 is NOT set or is NULL.";
}

if (isset($var2)) {
    $issetOutput[] = "var2 is set.";
} else {
    $issetOutput[] = "var2 is NOT set or is NULL.";
}

if (isset($var1, $var2)) {
    $issetOutput[] = "Both variables are set.";
} else {
    $issetOutput[] = "At least one variable is not set or is NULL.";
}

// Form handling using isset()
$formMessage = "";
if (isset($_POST['username'])) {
    $username = trim($_POST['username']);
    if ($username !== "") {
        $formMessage = "Username entered: " . htmlspecialchars($username);
    } else {
        $formMessage = "Username field is empty.";
    }
} else {
    $formMessage = "Please enter your username below.";
}

// ------------------ Part 2: Highest & Lowest in Array ------------------
function findHighLow($numbers) {
    if (empty($numbers)) {
        return ["error" => "Array is empty"];
    }
    $highest = max($numbers);
    $lowest = min($numbers);
    return ["highest" => $highest, "lowest" => $lowest];
}

$numbersArray = [12, 45, 7, 89, 34, 22, 67];
$result = findHighLow($numbersArray);
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>isset() & High-Low Array Example</title>
<style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    h2 { color: #333; margin-top: 30px; }
    .section { padding: 15px; border: 1px solid #ccc; margin-bottom: 20px; border-radius: 5px; }
    .result { font-weight: bold; margin-top: 10px; }
    .error { color: red; }
</style>
</head>
<body>

<!-- Part 1: isset() Example -->
<div class="section">
    <h2>Basic isset() Checks</h2>
    <?php
    foreach ($issetOutput as $msg) {
        echo $msg . "<br>";
    }
    ?>
</div>

<div class="section">
    <h2>Form Handling with isset()</h2>
    <form method="post">
        <input type="text" name="username" placeholder="Enter name">
        <button type="submit">Submit</button>
    </form>
    <div class="result"><?php echo $formMessage; ?></div>
</div>

<!-- Part 2: Highest & Lowest Values -->
<div class="section">
    <h2>Highest & Lowest in Array</h2>
    <p><strong>Array Elements:</strong> <?php echo implode(", ", $numbersArray); ?></p>
    <div class="result">
        <?php
        if (isset($result["error"])) {
            echo $result["error"];
        } else {
            echo "Highest Value: " . $result["highest"] . "<br>";
            echo "Lowest Value: " . $result["lowest"];
        }
        ?>
    </div>
</div>

</body>
</html>

ANSWER 20:
INPUT:

<?php
// ------------------ PART 1: Highest & Lowest in Array ------------------
function findHighLow($numbers) {
    if (empty($numbers)) {
        return ["error" => "Array is empty"];
    }
    $highest = max($numbers);
    $lowest = min($numbers);
    return ["highest" => $highest, "lowest" => $lowest];
}

$numbersArray = [12, 45, 7, 89, 34, 22, 67];
$result = findHighLow($numbersArray);

// ------------------ PART 2: Contact Form with Validation ------------------
$name = $email = $message = "";
$nameErr = $emailErr = $messageErr = "";
$successMsg = "";

if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['contact_submit'])) {
    $valid = true;

    // Name validation
    if (empty($_POST["name"])) {
        $nameErr = "Name is required";
        $valid = false;
    } else {
        $name = htmlspecialchars(trim($_POST["name"]));
    }

    // Email validation
    if (empty($_POST["email"])) {
        $emailErr = "Email is required";
        $valid = false;
    } elseif (!filter_var($_POST["email"], FILTER_VALIDATE_EMAIL)) {
        $emailErr = "Invalid email format";
        $valid = false;
    } else {
        $email = htmlspecialchars(trim($_POST["email"]));
    }

    // Message validation
    if (empty($_POST["message"])) {
        $messageErr = "Message is required";
        $valid = false;
    } else {
        $message = htmlspecialchars(trim($_POST["message"]));
    }

    // Success message
    if ($valid) {
        $successMsg = "Thank you, $name! Your message has been received.";
    }
}
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Highest & Lowest + Contact Form</title>
<style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    h2 { color: #333; }
    .section { padding: 15px; border: 1px solid #ccc; margin-bottom: 20px; border-radius: 5px; }
    .result { font-weight: bold; margin-top: 10px; }
    .error { color: red; font-size: 0.9em; }
    .success { color: green; font-weight: bold; margin-top: 15px; }
    input, textarea { width: 100%; padding: 8px; margin-top: 5px; }
    button { margin-top: 10px; padding: 8px 15px; }
</style>
</head>
<body>

<!-- PART 1: Highest & Lowest in Array -->
<div class="section">
    <h2>Highest & Lowest in Array</h2>
    <p><strong>Array Elements:</strong> <?php echo implode(", ", $numbersArray); ?></p>
    <div class="result">
        <?php
        if (isset($result["error"])) {
            echo $result["error"];
        } else {
            echo "Highest Value: " . $result["highest"] . "<br>";
            echo "Lowest Value: " . $result["lowest"];
        }
        ?>
    </div>
</div>

<!-- PART 2: Contact Form -->
<div class="section">
    <h2>Contact Us</h2>
    <form method="post" action="">
        <label>Name:
            <input type="text" name="name" value="<?php echo $name; ?>">
            <span class="error"><?php echo $nameErr; ?></span>
        </label>

        <label>Email:
            <input type="text" name="email" value="<?php echo $email; ?>">
            <span class="error"><?php echo $emailErr; ?></span>
        </label>

        <label>Message:
            <textarea name="message"><?php echo $message; ?></textarea>
            <span class="error"><?php echo $messageErr; ?></span>
        </label>

        <button type="submit" name="contact_submit">Send Message</button>
    </form>

    <?php if ($successMsg): ?>
        <div class="success"><?php echo $successMsg; ?></div>
    <?php endif; ?>
</div>

</body>
</html>


ANSWER 21:
INPUT:

<?php
// Function to check if a year is a leap year
function isLeapYear($year) {
    if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
        return true;
    }
    return false;
}

// Example usage
$year = 2024; // You can change this value
$result = isLeapYear($year);
?>

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Leap Year Checker</title>
<style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    .result { font-size: 1.1rem; color: green; }
</style>
</head>
<body>

<h2>Leap Year Checker</h2>
<p>Year: <?php echo $year; ?></p>

<div class="result">
    <?php
        if ($result) {
            echo "$year is a Leap Year ✅";
        } else {
            echo "$year is NOT a Leap Year ❌";
        }
    ?>
</div>

</body>
</html>


ANSWER 22:
INPUT:

<?php
// Leap year checker function
function isLeapYear($year) {
    if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
        return true;
    }
    return false;
}

// Word occurrence counter function
function countWordOccurrences($text, $word) {
    return substr_count(strtolower($text), strtolower($word));
}

// Initialize results
$leapYearResult = "";
$wordCountResult = "";

// Check leap year form submission
if (isset($_POST['checkLeap'])) {
    $year = $_POST['year'];
    if (is_numeric($year)) {
        $leapYearResult = isLeapYear($year) 
            ? "$year is a Leap Year ✅" 
            : "$year is NOT a Leap Year ❌";
    } else {
        $leapYearResult = "Please enter a valid year.";
    }
}

// Check word occurrence form submission
if (isset($_POST['countWord'])) {
    $text = $_POST['text'];
    $word = $_POST['word'];
    if (!empty($text) && !empty($word)) {
        $count = countWordOccurrences($text, $word);
        $wordCountResult = "The word '$word' appears $count times.";
    } else {
        $wordCountResult = "Please enter both text and word.";
    }
}
?>

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Leap Year & Word Counter</title>
<style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    form { margin-bottom: 20px; padding: 10px; border: 1px solid #ccc; width: 350px; }
    .result { font-weight: bold; color: green; margin-top: 5px; }
</style>
</head>
<body>

<h2>Leap Year Checker</h2>
<form method="post">
    Enter Year: <input type="text" name="year" required>
    <button type="submit" name="checkLeap">Check Leap Year</button>
</form>
<div class="result"><?php echo $leapYearResult; ?></div>

<hr>

<h2>Word Occurrence Counter</h2>
<form method="post">
    Enter Text: <br>
    <textarea name="text" rows="4" cols="40" required></textarea><br><br>
    Enter Word to Search: <input type="text" name="word" required><br><br>
    <button type="submit" name="countWord">Count Occurrences</button>
</form>
<div class="result"><?php echo $wordCountResult; ?></div>

</body>
</html>


ANSWER 23:
INPUT:

<?php
// 1. Leap Year Checker Function
function isLeapYear($year) {
    return ($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0);
}

// 2. Word Occurrence Counter Function
function countWordOccurrences($string, $word) {
    return substr_count(strtolower($string), strtolower($word));
}

// 3. Handle GET search query
if (isset($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']);
    echo "<p>Showing results for: <b>$searchTerm</b></p>";
}

// 4. Handle POST contact form
if (isset($_POST['submitContact'])) {
    $name = htmlspecialchars($_POST['name']);
    $email = htmlspecialchars($_POST['email']);
    echo "<p>Thanks, $name! We will contact you at $email soon.</p>";
}

// 5. Handle Leap Year Form
if (isset($_POST['checkLeapYear'])) {
    $year = intval($_POST['year']);
    if (isLeapYear($year)) {
        echo "<p>$year is a Leap Year ✅</p>";
    } else {
        echo "<p>$year is NOT a Leap Year ❌</p>";
    }
}

// 6. Handle Word Count Form
if (isset($_POST['countWord'])) {
    $text = $_POST['text'];
    $word = $_POST['word'];
    $count = countWordOccurrences($text, $word);
    echo "<p>The word '<b>$word</b>' appears <b>$count</b> times in the given text.</p>";
}
?>

<!doctype html>
<html>
<head>
<title>Combined PHP Example</title>
</head>
<body>

<h2>Search Products (GET)</h2>
<form method="get">
    Search: <input type="text" name="search">
    <button type="submit">Search</button>
</form>

<hr>

<h2>Contact Us (POST)</h2>
<form method="post">
    Name: <input type="text" name="name" required><br><br>
    Email: <input type="email" name="email" required><br><br>
    <button type="submit" name="submitContact">Send</button>
</form>

<hr>

<h2>Leap Year Checker (POST)</h2>
<form method="post">
    Enter Year: <input type="number" name="year" required>
    <button type="submit" name="checkLeapYear">Check</button>
</form>

<hr>

<h2>Word Occurrence Counter (POST)</h2>
<form method="post">
    Enter Text:<br>
    <textarea name="text" rows="4" cols="40" required></textarea><br><br>
    Word to Count: <input type="text" name="word" required>
    <button type="submit" name="countWord">Count</button>
</form>

</body>
</html>



ANSWER 24:
INPUT:

<?php
echo "<h2>PHP String Functions Example</h2>";

// Sample string
$str = "  Hello World! PHP is awesome.  ";

// Original string
echo "Original String: '$str'<br><br>";

// 1. Trim - Remove whitespace from both ends
$trimmed = trim($str);
echo "Trimmed String: '$trimmed'<br>";

// 2. strlen - String length
echo "String Length: " . strlen($trimmed) . "<br>";

// 3. str_word_count - Count words
echo "Word Count: " . str_word_count($trimmed) . "<br>";

// 4. strrev - Reverse the string
echo "Reversed String: " . strrev($trimmed) . "<br>";

// 5. strtoupper - Convert to uppercase
echo "Uppercase: " . strtoupper($trimmed) . "<br>";

// 6. strtolower - Convert to lowercase
echo "Lowercase: " . strtolower($trimmed) . "<br>";

// 7. ucfirst - Uppercase first letter
echo "Uppercase First Letter: " . ucfirst(strtolower($trimmed)) . "<br>";

// 8. ucwords - Uppercase first letter of each word
echo "Uppercase Each Word: " . ucwords(strtolower($trimmed)) . "<br>";

// 9. strpos - Find position of a substring
echo "Position of 'PHP': " . strpos($trimmed, "PHP") . "<br>";

// 10. str_replace - Replace a word
echo "Replace 'awesome' with 'powerful': " . str_replace("awesome", "powerful", $trimmed) . "<br>";

// 11. substr - Get part of string
echo "Substring (0-5): " . substr($trimmed, 0, 5) . "<br>";

// 12. explode - Split string into array
$words = explode(" ", $trimmed);
echo "Exploded Array: <pre>";
print_r($words);
echo "</pre>";

// 13. implode - Join array into string
$joined = implode("-", $words);
echo "Imploded String: $joined<br>";

// 14. str_repeat - Repeat a string
echo "Repeat 'PHP': " . str_repeat("PHP ", 3) . "<br>";

// 15. htmlspecialchars - Convert special characters
$sample_html = "<b>Bold Text</b>";
echo "HTML Special Chars: " . htmlspecialchars($sample_html) . "<br>";

// 16. addslashes - Add slashes before quotes
$quote_str = "He said 'PHP is great!'";
echo "Add Slashes: " . addslashes($quote_str) . "<br>";

// 17. strip_tags - Remove HTML tags
echo "Strip Tags: " . strip_tags($sample_html) . "<br>";
?>
Output:

<h2>PHP String Functions Example</h2>Original String: '  Hello World! PHP is awesome.  '<br><br>Trimmed String: 'Hello World! PHP is awesome.'<br>String Length: 28<br>Word Count: 5<br>Reversed String: .emosewa si PHP !dlroW olleH<br>Uppercase: HELLO WORLD! PHP IS AWESOME.<br>Lowercase: hello world! php is awesome.<br>Uppercase First Letter: Hello world! php is awesome.<br>Uppercase Each Word: Hello World! Php Is Awesome.<br>Position of 'PHP': 13<br>Replace 'awesome' with 'powerful': Hello World! PHP is powerful.<br>Substring (0-5): Hello<br>Exploded Array: <pre>Array
(
    [0] => Hello
    [1] => World!
    [2] => PHP
    [3] => is
    [4] => awesome.
)
</pre>Imploded String: Hello-World!-PHP-is-awesome.<br>Repeat 'PHP': PHP PHP PHP <br>HTML Special Chars: &lt;b&gt;Bold Text&lt;/b&gt;<br>Add Slashes: He said \'PHP is great!\'<br>Strip Tags: Bold Text<br>

ANSWER 25:
INPUT:

<?php
echo "<h2>Replace First Occurrence Example</h2>";

$str = "The Thing will come to you soon";

// Use preg_replace to replace only the first match (case-insensitive)
$result = preg_replace('/the/i', 'best', $str, 1);

echo "Original String: $str<br>";
echo "Modified String: $result";
?>

Output:

<h2>Replace First Occurrence Example</h2>Original String: The Thing will come to you soon<br>Modified String: best Thing will come to you soon


ANSWER 26:
INPUT:

<?php
echo "<h2>Chess Board in PHP</h2>";
echo "<table width='400px' height='400px' cellspacing='0' cellpadding='0' border='1'>";

for ($row = 1; $row <= 8; $row++) {
    echo "<tr>";
    for ($col = 1; $col <= 8; $col++) {
        // Check if sum of row and column is even or odd
        if (($row + $col) % 2 == 0) {
            echo "<td bgcolor='#FFFFFF'></td>"; // White square
        } else {
            echo "<td bgcolor='#000000'></td>"; // Black square
        }
    }
    echo "</tr>";
}

echo "</table>";
?>


ANSWER 27:
INPUT:

<?php
// ---------- Mathematical Operators Examples ----------
$a = 12;
$b = 5;

echo "<h2>Mathematical Operators in PHP</h2>";
echo "Addition: $a + $b = " . ($a + $b) . "<br>";
echo "Subtraction: $a - $b = " . ($a - $b) . "<br>";
echo "Multiplication: $a * $b = " . ($a * $b) . "<br>";
echo "Division: $a / $b = " . ($a / $b) . "<br>";
echo "Modulus: $a % $b = " . ($a % $b) . "<br>";
echo "Exponentiation: $a ** $b = " . ($a ** $b) . "<br><br>";

// ---------- Chessboard Program ----------
echo "<h2>Chess Board</h2>";
echo "<table border='1' cellspacing='0' cellpadding='30'>";

for ($row = 1; $row <= 8; $row++) {
    echo "<tr>";
    for ($col = 1; $col <= 8; $col++) {
        // Alternate colors
        $total = $row + $col;
        if ($total % 2 == 0) {
            echo "<td bgcolor='white'></td>";
        } else {
            echo "<td bgcolor='black'></td>";
        }
    }
    echo "</tr>";
}

echo "</table>";
?>


ANSWER 28:
INPUT:

<?php
// Define variables
$a = 10;
$b = "10";
$c = 15;

echo "<h2>Using var_dump() to Compare Variables</h2>";

echo "Value of \$a: ";
var_dump($a);
echo "<br>";

echo "Value of \$b: ";
var_dump($b);
echo "<br>";

echo "Value of \$c: ";
var_dump($c);
echo "<br><br>";

// Check if values are equal using ==
echo "<strong>Equality (==) check:</strong><br>";
var_dump($a == $b); // true because values are the same
echo "<br>";
var_dump($a == $c); // false
echo "<br><br>";

// Check if values and types are equal using ===
echo "<strong>Identity (===) check:</strong><br>";
var_dump($a === $b); // false because types differ (int vs string)
echo "<br>";
var_dump($a === $c); // false
?>


ANSWER 29:
INPUT:

<?php
// rand() example
echo "<h3>rand() Function</h3>";
echo "Random number between 1 and 100: " . rand(1, 100) . "<br><br>";

// abs() example
echo "<h3>abs() Function</h3>";
echo "Absolute value of -15 is: " . abs(-15) . "<br><br>";

// str_replace() example
echo "<h3>str_replace() Function</h3>";
$text = "I like apples";
echo "Original text: $text <br>";
echo "After replacement: " . str_replace("apples", "mangoes", $text) . "<br><br>";

// pi() example
echo "<h3>pi() Function</h3>";
echo "The value of pi is: " . pi() . "<br><br>";

// ceil() example
echo "<h3>ceil() Function</h3>";
echo "Ceil of 4.3 is: " . ceil(4.3) . "<br>";
echo "Ceil of 7.1 is: " . ceil(7.1) . "<br>";
?>


ANSWER 30"
INPUT:

<?php
function generatePassword($length = 12) {
    // Characters to include in password
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-={}[]<>?';
    $password = '';
    $charLength = strlen($characters);

    // Loop to create password
    for ($i = 0; $i < $length; $i++) {
        $password .= $characters[rand(0, $charLength - 1)];
    }

    return $password;
}

// Example usage
echo "<h3>Random Password Generator</h3>";
echo "Generated Password: <b>" . generatePassword(12) . "</b>";
?>

ANSWER:31

INPUT:
<?php
// Original array
$fruits = ["apple", "banana", "cherry"];

// Remove the first element
array_shift($fruits);

// Print the modified array
print_r($fruits);
?>

OUTPUT:

Output:

Array
(
    [0] => banana
    [1] => cherry
)


ANSER:32(A)

INPUT:

<?php
// Define the email address
$mail = "admin@example.com";

// Replace all lowercase 'a' with '@'
$mail = str_replace("a", "@", $mail);

// Print the modified email in a message
echo "Contact me at $mail.";
?>

Output:

Contact me at @dmin@ex@mple.com.

ANSWER:32(B)

INPUT:

<?php
// Define the array of names
$names = array("alex", "jean", "emily", "jane");

// Filter names that start with 'e'
$name = preg_grep("/^e/", $names);

// Print the matching names
print_r($name);
?>
Output:

Array
(
    [2] => emily
)

ANSWER:33

INPUT:

<?php
// Create a 3x3 matrix (multidimensional array)
$matrix = array(
    array(1, 2, 3),      // Row 0
    array(4, 5, 6),      // Row 1
    array(7, 8, 9)       // Row 2
);

// Access the value in the second row and third column
$value = $matrix[1][2]; // Row 1, Column 2 (zero-based index)

// Display the value
echo "The value in the second row and third column is: $value";
?>

Output:

The value in the second row and third column is: 6

ANSWER:34

INPUT:

<?php
// Original string
$text = "The dog barked at another dog near the doghouse.";

// Replace all whole-word occurrences of "dog" with "cat"
$updatedText = preg_replace("/\bdog\b/", "cat", $text);

// Display the result
echo $updatedText;
?>

Output:

The cat barked at another cat near the doghouse.

ANSWER:35

INPUT:

<?php
// Array of strings to check
$strings = ["apple pie", "banana split", "cherry tart", "pineapple cake"];

// Substring to search for
$search = "apple";

// Loop through each string in the array
foreach ($strings as $str) {
    // Check if $search exists in the current string
    if (strpos($str, $search) !== false) {
        echo "'$search' found in \"$str\".\n";
    } else {
        echo "'$search' NOT found in \"$str\".\n";
    }
}
?>

Output:

'apple' found in "apple pie".
'apple' NOT found in "banana split".
'apple' NOT found in "cherry tart".
'apple' found in "pineapple cake".


ANSWER:36

INPUT:

<?php
// Create an array of fruits
$fruits = ["apple", "banana", "cherry", "date", "elderberry"];

// Display the third element (index 2, since arrays are zero-based)
echo $fruits[2];
?>

Output:

cherry

ANSWER:37

INPUT:

<?php
// Create an initial array
$fruits = ["apple", "banana"];

// Push new fruits to the end
array_push($fruits, "cherry", "date");
echo "After pushing: ";
print_r($fruits);

// Pop the last fruit
$lastFruit = array_pop($fruits);
echo "Popped element: $lastFruit\n";

// Array after popping
echo "After popping: ";
print_r($fruits);
?>

Output:

After pushing: Array
(
    [0] => apple
    [1] => banana
    [2] => cherry
    [3] => date
)
Popped element: date
After popping: Array
(
    [0] => apple
    [1] => banana
    [2] => cherry
)

ANSWER:38

INPUT:

<?php
$fruits = ["apple", "banana", "cherry", "date"];

// Initialize pointer to first element
reset($fruits);

// Get current element
$currentFruit = current($fruits);

while ($currentFruit !== false) {
    // Get the key of the current element
    $key = key($fruits);

    // Print key and value
    echo "Key: $key; Value: $currentFruit\n";

    // Move pointer to the next element
    $currentFruit = next($fruits);
}
?>


Output:

Key: 0; Value: apple
Key: 1; Value: banana
Key: 2; Value: cherry
Key: 3; Value: date

ANSWER:39

INPUT:

<?php
$students = [
    ["name" => "Alice", "scores" => [85, 90, 78]],
    ["name" => "Bob", "scores" => [65, 70, 58]],
    ["name" => "Charlie", "scores" => [95, 88, 92]],
];

echo "Student Grade Report:\n";
echo "---------------------\n";

$averages = [];

foreach ($students as $student) {
    $avg = array_sum($student['scores']) / count($student['scores']);
    $avgRounded = round($avg, 2);
    $averages[] = $avgRounded;

    if ($avg >= 90) {
        $grade = "A";
    } elseif ($avg >= 80) {
        $grade = "B";
    } elseif ($avg >= 70) {
        $grade = "C";
    } elseif ($avg >= 60) {
        $grade = "D";
    } else {
        $grade = "F";
    }

    echo "Name: {$student['name']}\n";
    echo "Average Score: $avgRounded\n";
    echo "Grade: $grade\n";
    echo "---------------------\n";
}

$classAverage = array_sum($averages) / count($averages);
echo "Class Average Score: " . round($classAverage, 2) . "\n";
?>


Output:

Student Grade Report:
---------------------
Name: Alice
Average Score: 84.33
Grade: B
---------------------
Name: Bob
Average Score: 64.33
Grade: D
---------------------
Name: Charlie
Average Score: 91.67
Grade: A
---------------------
Class Average Score: 80.11

ANSWER:40

INPUT:

<?php
// Original string
$input = "Hello! This is a test, with special chars: @#$%^&*()_+123.";

// Convert string to array of characters
$chars = str_split($input);

// Allowed characters: letters, digits, and space
$allowed = array_merge(
    range('a', 'z'),
    range('A', 'Z'),
    range('0', '9'),
    [' ']
);

// Filter characters that are in allowed array
$filteredChars = array_filter($chars, function($char) use ($allowed) {
    return in_array($char, $allowed);
});

// Convert filtered array back to string
$output = implode('', $filteredChars);

echo $output;
?>


Output:

Hello This is a test with special chars 123

ANSWER:41

INPUT:

<?php
// Sample input string containing emails
$text = "Contact us at info@example.com, support@test.org or sales@my-company.net.";

// Regular expression pattern to match emails
$pattern = '/[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}/i';

// Extract all email addresses into an array
preg_match_all($pattern, $text, $matches);

// $matches[0] contains all matched emails
print_r($matches[0]);
?>


Output:

Array
(
    [0] => info@example.com
    [1] => support@test.org
    [2] => sales@my-company.net
)

ANSWER:42

INPUT:

<?php
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);

// Combine all arrays into one
$allMarks = array_merge($marks1, $marks2, $marks3);

// Find the maximum mark
$maxMark = max($allMarks);

// Find the minimum mark
$minMark = min($allMarks);

echo "Maximum mark: $maxMark\n";
echo "Minimum mark: $minMark\n";
?>


Output:

Maximum mark: 635
Minimum mark: 111

ANSWER:43

INPUT:

<?php
// Password to validate
$password = "Abc123!@#";

// Regular expression pattern for validation:
// - at least 8 characters
// - at least one uppercase letter
// - at least one lowercase letter
// - at least one digit
// - at least one special character
$pattern = '/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/';

// Validate password
if (preg_match($pattern, $password)) {
    echo "Valid password";
} else {
    echo "Invalid password";
}
?>


Output:

Valid password

ANSWER:44

INPUT:

<?php
$songs = [
    ["id"=>101, "title"=>"Imagine", "artist"=>"John Lennon", "duration"=>183],
    ["id"=>102, "title"=>"Hey Jude", "artist"=>"The Beatles", "duration"=>431],
    ["id"=>103, "title"=>"Bohemian Rhapsody", "artist"=>"Queen", "duration"=>354],
];

$playlists = [];

function createPlaylist(&$playlists, $name) {
    if (isset($playlists[$name])) return false;
    $playlists[$name] = ["name"=>$name, "songs"=>[]];
    return true;
}

function addSong(&$playlists, $playlist, $song) {
    if (!isset($playlists[$playlist])) return false;
    foreach ($playlists[$playlist]['songs'] as $s) if ($s['id'] == $song['id']) return false;
    $playlists[$playlist]['songs'][] = $song;
    return true;
}

function removeSong(&$playlists, $playlist, $songId) {
    if (!isset($playlists[$playlist])) return false;
    $playlists[$playlist]['songs'] = array_filter($playlists[$playlist]['songs'], fn($s) => $s['id'] != $songId);
    return true;
}

function display($playlist) {
    echo "Playlist: {$playlist['name']}\nSongs:\n";
    foreach ($playlist['songs'] as $s) echo "- {$s['title']} by {$s['artist']} ({$s['duration']}s)\n";
    echo "\n";
}

function reorder(&$playlists, $playlist, $from, $to) {
    if (!isset($playlists[$playlist])) return false;
    $songs = &$playlists[$playlist]['songs'];
    if (!isset($songs[$from], $songs[$to])) return false;
    $song = $songs[$from];
    array_splice($songs, $from, 1);
    array_splice($songs, $to, 0, [$song]);
    return true;
}

// Use
createPlaylist($playlists, "Favorites");
addSong($playlists, "Favorites", $songs[0]);
addSong($playlists, "Favorites", $songs[1]);
addSong($playlists, "Favorites", $songs[2]);

display($playlists["Favorites"]);

removeSong($playlists, "Favorites", 102);
display($playlists["Favorites"]);

reorder($playlists, "Favorites", 1, 0);
display($playlists["Favorites"]);
?>


Output:

Playlist: Favorites
Songs:
- Imagine by John Lennon (183s)
- Hey Jude by The Beatles (431s)
- Bohemian Rhapsody by Queen (354s)

Playlist: Favorites
Songs:
- Imagine by John Lennon (183s)
- Bohemian Rhapsody by Queen (354s)

Playlist: Favorites
Songs:
- Imagine by John Lennon (183s)
- Bohemian Rhapsody by Queen (354s)


ANSWER:45

INPUT:

<?php
function arrayDiffRecursive($array1, $array2) {
    $difference = [];
    foreach ($array1 as $key => $value) {
        if (is_array($value)) {
            if (!isset($array2[$key]) || !is_array($array2[$key])) {
                $difference[$key] = $value;
            } else {
                $diff = arrayDiffRecursive($value, $array2[$key]);
                if (!empty($diff)) {
                    $difference[$key] = $diff;
                }
            }
        } else {
            if (!isset($array2[$key]) || $array2[$key] !== $value) {
                $difference[$key] = $value;
            }
        }
    }
    return $difference;
}

// Example usage
$arr1 = [
    "a" => 1,
    "b" => ["x" => 5, "y" => 10],
    "c" => 3
];

$arr2 = [
    "a" => 1,
    "b" => ["x" => 5, "y" => 8],
    "d" => 4
];

print_r(arrayDiffRecursive($arr1, $arr2));


Output:

Array
(
    [b] => Array
        (
            [y] => 10
        )

    [c] => 3
)

ANSWER:46

INPUT:

<?php
function findIndex($array, $value) {
    $index = array_search($value, $array);
    if ($index !== false) {
        return $index;
    } else {
        return -1; // Not found
    }
}

// Example usage
$fruits = ["apple", "banana", "cherry", "date"];
$searchValue = "cherry";

$index = findIndex($fruits, $searchValue);

if ($index !== -1) {
    echo "Value '$searchValue' found at index $index.";
} else {
    echo "Value '$searchValue' not found in the array.";
}
?>


Output:

Value 'cherry' found at index 2.


ANSWER:47

INPUT:

<?php
$x = array(1, 2, 3, 4, 5);

// Let's say we want to delete the element with value 3
$key = array_search(3, $x);
if ($key !== false) {
    unset($x[$key]);
}

// Re-index the array to have continuous numeric keys
$x = array_values($x);

// Print the updated array
print_r($x);
?>


Output:

Array
(
    [0] => 1
    [1] => 2
    [2] => 4
    [3] => 5
)

ANSWER:48

INPUT:

<?php
$records = [
    ["id" => 1, "name" => "Alice", "score" => 85],
    ["id" => 2, "name" => "Bob", "score" => 90],
    ["id" => 3, "name" => "Charlie", "score" => 78],
];

// Print 2nd record
print_r($records[1]);

// Print all records
foreach ($records as $i => $rec) {
    echo "Record #" . ($i + 1) . ": {$rec['name']} scored {$rec['score']}\n";
}

// Read CSV if exists
if (file_exists("data.csv")) {
    $handle = fopen("data.csv", "r");
    $count = 1;
    while ($data = fgetcsv($handle)) {
        echo "CSV Record #$count: " . implode(", ", $data) . "\n";
        $count++;
    }
    fclose($handle);
} else {
    echo "CSV file not found.\n";
}
?>


Output:

Array
(
    [id] => 2
    [name] => Bob
    [score] => 90
)
Record #1: Alice scored 85
Record #2: Bob scored 90
Record #3: Charlie scored 78
CSV file not found.


ANSWER:49

INPUT:

<?php
$players = [
    ["name" => "Alice", "points" => 24, "assists" => 7, "rebounds" => 10],
    ["name" => "Bob", "points" => 30, "assists" => 5, "rebounds" => 8],
    ["name" => "Charlie", "points" => 18, "assists" => 10, "rebounds" => 12],
];

$weights = ["points" => 0.5, "assists" => 0.3, "rebounds" => 0.2];

foreach ($players as &$p) {
    $p['performance'] = $p['points'] * $weights['points'] + $p['assists'] * $weights['assists'] + $p['rebounds'] * $weights['rebounds'];
}
unset($p);

$avg = array_sum(array_column($players, 'performance')) / count($players);

usort($players, fn($a, $b) => $b['performance'] <=> $a['performance']);

echo "Average performance: " . round($avg, 2) . "\n\n";
echo "Player rankings:\n";
foreach ($players as $i => $p) {
    echo ($i + 1) . ". {$p['name']} - Performance: " . round($p['performance'], 2) . "\n";
}
?>


Output:

Average performance: 16.2

Player rankings:
1. Bob - Performance: 18.1
2. Alice - Performance: 16.1
3. Charlie - Performance: 14.4


ANSWER:50

INPUT:

<?php
$fruits = ["Apple", "Banana", "Cherry", "Date"];

// Convert all elements to lowercase
$lowercase = array_map('strtolower', $fruits);

// Convert all elements to uppercase
$uppercase = array_map('strtoupper', $fruits);

// Display results
print_r($lowercase);
print_r($uppercase);
?>


Output:

Array
(
    [0] => apple
    [1] => banana
    [2] => cherry
    [3] => date
)
Array
(
    [0] => APPLE
    [1] => BANANA
    [2] => CHERRY
    [3] => DATE
)

ANSWER:51

INPUT:

<?php
// Initial array
$items = ["b", "c"];

// Add an element to the beginning using array_unshift()
array_unshift($items, "a");
echo "After array_unshift():\n";
print_r($items); // [0 => "a", 1 => "b", 2 => "c"]

// Remove the first element using array_shift()
$removed = array_shift($items);
echo "After array_shift():\n";
print_r($items); // [0 => "b", 1 => "c"]
echo "Removed element: $removed\n";
?>


Output:

After array_unshift():
Array
(
    [0] => a
    [1] => b
    [2] => c
)
After array_shift():
Array
(
    [0] => b
    [1] => c
)
Removed element: a


ANSWER:52

INPUT:

<?php
// Stack (LIFO)
$stack = ["A", "B", "C"];
$popped = array_pop($stack);
echo "Stack after pop:\n";
print_r($stack);
echo "Popped item: $popped\n\n";

// Queue (FIFO)
$queue = ["A", "B", "C"];
$shifted = array_shift($queue);
echo "Queue after dequeue:\n";
print_r($queue);
echo "Dequeued item: $shifted\n";
?>


Output:

Stack after pop:
Array
(
    [0] => A
    [1] => B
)
Popped item: C

Queue after dequeue:
Array
(
    [0] => B
    [1] => C
)
Dequeued item: A

ANSWER:53

INPUT:

<?php
$array = [10, 20, 30, 40, 50];

// Using array_pop() removes the **last** element
$popValue = array_pop($array);
echo "After array_pop():\n";
print_r($array);
echo "Popped value: $popValue\n\n";

// Reset array
$array = [10, 20, 30, 40, 50];

// Using array_shift() removes the **first** element
$shiftValue = array_shift($array);
echo "After array_shift():\n";
print_r($array);
echo "Shifted value: $shiftValue\n";
?>


Output:

After array_pop():
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
)
Popped value: 50

After array_shift():
Array
(
    [0] => 20
    [1] => 30
    [2] => 40
    [3] => 50
)
Shifted value: 10

ANSWER:54

<?php
$q = [];

function add(&$q, $name) {
    $q[] = $name;
    echo "$name added.\n";
}

function serve(&$q) {
    if (empty($q)) {
        echo "Queue empty.\n";
        return;
    }
    echo array_shift($q) . " served.\n";
}

function show($q) {
    if (empty($q)) {
        echo "Queue empty.\n";
    } else {
        echo "Queue: " . implode(", ", $q) . "\n";
    }
}

add($q, "Alice");
add($q, "Bob");
add($q, "Charlie");
show($q);

serve($q);
show($q);

add($q, "David");
show($q);

serve($q);
serve($q);
serve($q);
serve($q);
?>


Output:

Alice added.
Bob added.
Charlie added.
Queue: Alice, Bob, Charlie
Alice served.
Queue: Bob, Charlie
David added.
Queue: Bob, Charlie, David
Bob served.
Charlie served.
David served.
Queue empty.

ANSWER:55

INPUT:

<?php
function reverseStringUsingStack($input) {
    $stack = [];
    
    // Push each character onto the stack
    for ($i = 0; $i < strlen($input); $i++) {
        array_push($stack, $input[$i]);
    }
    
    $reversed = '';
    
    // Pop characters from the stack to build the reversed string
    while (!empty($stack)) {
        $reversed .= array_pop($stack);
    }
    
    return $reversed;
}

// Example usage
$string = "Hello, World!";
echo "Original string: $string\n";
echo "Reversed string: " . reverseStringUsingStack($string) . "\n";
?>


Output:

Original string: Hello, World!
Reversed string: !dlroW ,olleH


ANSWER:56

INPUT:

<?php
echo "<h2>PHP Array Sorting Functions Demo</h2>";

$array = ["Banana", "apple", "Mango", "Cherry", "banana10", "banana2"];

echo "<b>Original Array:</b><br>";
print_r($array);
echo "<hr>";

// sort() - Ascending, reindexes keys
$temp = $array;
sort($temp);
echo "<b>sort() - Ascending:</b><br>";
print_r($temp);
echo "<br><br>";

// rsort() - Descending, reindexes keys
$temp = $array;
rsort($temp);
echo "<b>rsort() - Descending:</b><br>";
print_r($temp);
echo "<br><br>";

// asort() - Ascending by values, preserves keys
$temp = $array;
asort($temp);
echo "<b>asort() - Ascending (Preserve Keys):</b><br>";
print_r($temp);
echo "<br><br>";

// arsort() - Descending by values, preserves keys
$temp = $array;
arsort($temp);
echo "<b>arsort() - Descending (Preserve Keys):</b><br>";
print_r($temp);
echo "<br><br>";

// ksort() - Ascending by keys
$temp = array_combine(range(1, count($array)), $array);
ksort($temp);
echo "<b>ksort() - Ascending Keys:</b><br>";
print_r($temp);
echo "<br><br>";

// krsort() - Descending by keys
$temp = array_combine(range(1, count($array)), $array);
krsort($temp);
echo "<b>krsort() - Descending Keys:</b><br>";
print_r($temp);
echo "<br><br>";

// natsort() - Natural order
$temp = $array;
natsort($temp);
echo "<b>natsort() - Natural Order:</b><br>";
print_r($temp);
echo "<br><br>";

// natcasesort() - Natural order (case-insensitive)
$temp = $array;
natcasesort($temp);
echo "<b>natcasesort() - Natural Order (Case Insensitive):</b><br>";
print_r($temp);
echo "<br><br>";

// usort() - Custom sort by string length
$temp = $array;
usort($temp, fn($a, $b) => strlen($a) <=> strlen($b));
echo "<b>usort() - Custom Sort by String Length:</b><br>";
print_r($temp);
echo "<br><br>";

// array_multisort() - Sorting multiple arrays
$names = ["John", "Jane", "Dave"];
$scores = [90, 80, 95];
array_multisort($scores, SORT_DESC, $names);
echo "<b>array_multisort() - Sort Scores Descending:</b><br>";
print_r($names);
print_r($scores);
?>


Output:

<h2>PHP Array Sorting Functions Demo</h2><b>Original Array:</b><br>Array
(
    [0] => Banana
    [1] => apple
    [2] => Mango
    [3] => Cherry
    [4] => banana10
    [5] => banana2
)
<hr><b>sort() - Ascending:</b><br>Array
(
    [0] => Banana
    [1] => Cherry
    [2] => Mango
    [3] => apple
    [4] => banana10
    [5] => banana2
)
<br><br><b>rsort() - Descending:</b><br>Array
(
    [0] => banana2
    [1] => banana10
    [2] => apple
    [3] => Mango
    [4] => Cherry
    [5] => Banana
)
<br><br><b>asort() - Ascending (Preserve Keys):</b><br>Array
(
    [0] => Banana
    [3] => Cherry
    [2] => Mango
    [1] => apple
    [4] => banana10
    [5] => banana2
)
<br><br><b>arsort() - Descending (Preserve Keys):</b><br>Array
(
    [5] => banana2
    [4] => banana10
    [1] => apple
    [2] => Mango
    [3] => Cherry
    [0] => Banana
)
<br><br><b>ksort() - Ascending Keys:</b><br>Array
(
    [1] => Banana
    [2] => apple
    [3] => Mango
    [4] => Cherry
    [5] => banana10
    [6] => banana2
)
<br><br><b>krsort() - Descending Keys:</b><br>Array
(
    [6] => banana2
    [5] => banana10
    [4] => Cherry
    [3] => Mango
    [2] => apple
    [1] => Banana
)
<br><br><b>natsort() - Natural Order:</b><br>Array
(
    [0] => Banana
    [3] => Cherry
    [2] => Mango
    [1] => apple
    [5] => banana2
    [4] => banana10
)
<br><br><b>natcasesort() - Natural Order (Case Insensitive):</b><br>Array
(
    [1] => apple
    [0] => Banana
    [5] => banana2
    [4] => banana10
    [3] => Cherry
    [2] => Mango
)
<br><br><b>usort() - Custom Sort by String Length:</b><br>Array
(
    [0] => apple
    [1] => Mango
    [2] => Banana
    [3] => Cherry
    [4] => banana2
    [5] => banana10
)
<br><br><b>array_multisort() - Sort Scores Descending:</b><br>Array
(
    [0] => Dave
    [1] => John
    [2] => Jane
)
Array
(
    [0] => 95
    [1] => 90
    [2] => 80
)

ANSWER:57

INPUT:

<?php
echo "<h2>PHP Regular Expressions - Examples</h2>";

// 1. Simple Match
echo "<b>1. Match 'php' in string:</b><br>";
if (preg_match("/php/i", "I love PHP programming.")) {
    echo "Match found!<br><br>";
} else {
    echo "No match found.<br><br>";
}

// 2. Extract All Numbers
echo "<b>2. Extract numbers:</b><br>";
preg_match_all("/\d+/", "Order numbers: 123, 456, and 789.", $matches);
print_r($matches[0]);
echo "<br><br>";

// 3. Replace Spaces with Hyphen
echo "<b>3. Replace spaces:</b><br>";
$text = "Hello   World   PHP";
echo "Before: $text<br>";
echo "After: " . preg_replace("/\s+/", "-", $text) . "<br><br>";

// 4. Validate Email
echo "<b>4. Validate email:</b><br>";
$email = "user@example.com";
if (preg_match("/^[\w.-]+@[\w.-]+\.[a-z]{2,}$/i", $email)) {
    echo "$email is valid.<br><br>";
} else {
    echo "$email is invalid.<br><br>";
}

// 5. Split String
echo "<b>5. Split fruits string:</b><br>";
$fruits = preg_split("/[\s,;]+/", "apple, banana; cherry orange");
print_r($fruits);
echo "<br>";
?>


Output:

<h2>PHP Regular Expressions - Examples</h2><b>1. Match 'php' in string:</b><br>Match found!<br><br><b>2. Extract numbers:</b><br>Array
(
    [0] => 123
    [1] => 456
    [2] => 789
)
<br><br><b>3. Replace spaces:</b><br>Before: Hello   World   PHP<br>After: Hello-World-PHP<br><br><b>4. Validate email:</b><br>user@example.com is valid.<br><br><b>5. Split fruits string:</b><br>Array
(
    [0] => apple
    [1] => banana
    [2] => cherry
    [3] => orange
)
<br>

ANSWER:58

INPUT:

<?php
echo "<h2>Extract Email Addresses Using RegEx in PHP</h2>";

// Sample string containing emails
$string = "Hello, contact us at info@example.com, support@domain.org, or sales@company.co.uk.";

// Regular expression pattern to match email addresses
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/i";

// Use preg_match_all to find all email addresses
preg_match_all($pattern, $string, $matches);

// Display results
if (!empty($matches[0])) {
    echo "Email addresses found:<br>";
    foreach ($matches[0] as $email) {
        echo "- $email<br>";
    }
} else {
    echo "No email addresses found in the string.";
}
?>

Output:
<h2>Extract Email Addresses Using RegEx in PHP</h2>Email addresses found:<br>- info@example.com<br>- support@domain.org<br>- sales@company.co.uk<br>

QUESTION 59
<?php
// Function to calculate average
function calculateAverage($numbers) {
    if (empty($numbers)) {
        return 0; // Avoid division by zero
    }
    $sum = array_sum($numbers);      // Sum of all elements
    $count = count($numbers);        // Number of elements
    $average = $sum / $count;        // Calculate average
    return $average;
}

// Example usage
$numbers = [10, 20, 30, 40, 50];
$avg = calculateAverage($numbers);

echo "Numbers: ";
print_r($numbers);
echo "<br>Average: $avg";
?>

Output:

Numbers: Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
    [4] => 50
)
<br>Average: 30

QUESTION 60
<?php
// Function to search a value in an associative array
function searchValueInAssocArray($array, $value) {
    $keys = array_keys($array, $value); // Find all keys with the specified value
    if (!empty($keys)) {
        return $keys; // Return array of matching keys
    } else {
        return null; // Return null if value not found
    }
}

// Example associative array
$students = [
    "A101" => "Alice",
    "A102" => "Bob",
    "A103" => "Charlie",
    "A104" => "Alice"
];

// Search for a value
$searchValue = "Alice";
$result = searchValueInAssocArray($students, $searchValue);

// Display results
if ($result) {
    echo "Value '$searchValue' found at key(s): ";
    echo implode(", ", $result);
} else {
    echo "Value '$searchValue' not found in the array.";
}
?>

Output:
Value 'Alice' found at key(s): A101, A104

QUESTION 61
<?php
echo "<h2>Deleting Elements from an Array in PHP</h2>";

// Original array
$array = [1, 2, 3, 4, 5];
echo "<strong>Original Array:</strong> ";
print_r($array);
echo "<br><br>";

// 1. Delete by Key/Index using unset()
unset($array[2]); // Deletes element with index 2 (value 3)
echo "<strong>After unset() by index 2:</strong> ";
print_r($array);
echo "<br><br>";

// Re-index array
$array = array_values($array);
echo "<strong>After re-indexing:</strong> ";
print_r($array);
echo "<br><br>";

// 2. Delete by Value
$array = [1, 2, 3, 4, 5];
$valueToDelete = 3;
$key = array_search($valueToDelete, $array);
if ($key !== false) {
    unset($array[$key]);
}
$array = array_values($array); // Re-index
echo "<strong>After deleting value 3:</strong> ";
print_r($array);
echo "<br><br>";

// 3. Remove First Element using array_shift()
$array = [1, 2, 3, 4, 5];
array_shift($array);
echo "<strong>After array_shift() (remove first element):</strong> ";
print_r($array);
echo "<br><br>";

// 4. Remove Last Element using array_pop()
$array = [1, 2, 3, 4, 5];
array_pop($array);
echo "<strong>After array_pop() (remove last element):</strong> ";
print_r($array);
echo "<br><br>";
?>

Output:

<h2>Deleting Elements from an Array in PHP</h2><strong>Original Array:</strong> Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
)
<br><br><strong>After unset() by index 2:</strong> Array
(
    [0] => 1
    [1] => 2
    [3] => 4
    [4] => 5
)
<br><br><strong>After re-indexing:</strong> Array
(
    [0] => 1
    [1] => 2
    [2] => 4
    [3] => 5
)
<br><br><strong>After deleting value 3:</strong> Array
(
    [0] => 1
    [1] => 2
    [2] => 4
    [3] => 5
)
<br><br><strong>After array_shift() (remove first element):</strong> Array
(
    [0] => 2
    [1] => 3
    [2] => 4
    [3] => 5
)
<br><br><strong>After array_pop() (remove last element):</strong> Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
)
<br><br>

QUESTION 62
<?php
echo "<h2>Rounding Values in PHP</h2>";

// Sample values
$values = [1.65, 1.65, -1.54];

echo "<strong>Original Values:</strong> ";
print_r($values);
echo "<br><br>";

echo "<strong>Rounded Values (1 decimal place):</strong><br>";

// Round each value to 1 decimal place
foreach ($values as $value) {
    $rounded = round($value, 1); // 1 decimal place
    echo "Original: $value => Rounded: $rounded<br>";
}
?>

Output:

<h2>Rounding Values in PHP</h2><strong>Original Values:</strong> Array
(
    [0] => 1.65
    [1] => 1.65
    [2] => -1.54
)
<br><br><strong>Rounded Values (1 decimal place):</strong><br>Original: 1.65 => Rounded: 1.7<br>Original: 1.65 => Rounded: 1.7<br>Original: -1.54 => Rounded: -1.5<br>

QUESTION 63
<?php
function sumEvenNumbers($numbers) {
    $sum = 0;
    foreach ($numbers as $num) {
        if ($num % 2 == 0) {  // check if the number is even
            $sum += $num;     // add it to the sum
        }
    }
    return $sum;
}

// Example usage
$array = [1, 2, 3, 4, 5, 6];
echo "Sum of even numbers: " . sumEvenNumbers($array);  // Output: 12
?>

Output:
Sum of even numbers: 12

QUESTION 64
<?php
// Historical monthly sales data (example in units or revenue)
$sales = [1200, 1350, 1420, 1500, 1600, 1720, 1800, 1900, 2050, 2200, 2300, 2450];

// Function to calculate monthly growth rates
function calculateGrowthRates($sales) {
    $growthRates = [];
    for ($i = 1; $i < count($sales); $i++) {
        $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100; // % growth
        $growthRates[] = round($growth, 2);
    }
    return $growthRates;
}

// Function to forecast next month's sales based on average growth rate
function forecastNextMonth($sales) {
    $growthRates = calculateGrowthRates($sales);
    $avgGrowthRate = array_sum($growthRates) / count($growthRates); // average growth %
    $lastMonthSales = end($sales);
    $forecast = $lastMonthSales * (1 + $avgGrowthRate / 100);
    return round($forecast, 2);
}

// Calculate growth rates
$growthRates = calculateGrowthRates($sales);
echo "Monthly Growth Rates (%): ";
print_r($growthRates);

// Forecast next month's sales
$nextMonthForecast = forecastNextMonth($sales);
echo "Forecasted sales for next month: " . $nextMonthForecast;
?>

Output:

Monthly Growth Rates (%): Array
(
    [0] => 12.5
    [1] => 5.19
    [2] => 5.63
    [3] => 6.67
    [4] => 7.5
    [5] => 4.65
    [6] => 5.56
    [7] => 7.89
    [8] => 7.32
    [9] => 4.55
    [10] => 6.52
)
Forecasted sales for next month: 2614.77

QUESTION 65
<?php
// Main string
$mainString = "Welcome to the world of PHP programming.";

// Substring to search
$searchString = "PHP";

// Check if the substring exists in the main string
if (strpos($mainString, $searchString) !== false) {
    echo "The string '$searchString' was found in the main string.";
} else {
    echo "The string '$searchString' was NOT found in the main string.";
}
?>

Output:
The string 'PHP' was found in the main string.

QUESTION 66
<?php
// 1. Sum of even numbers in an array
function sumEvenNumbers($numbers) {
    $sum = 0;
    foreach ($numbers as $num) {
        if ($num % 2 == 0) {
            $sum += $num;
        }
    }
    return $sum;
}

// 2. Sales forecasting system
function calculateGrowthRates($sales) {
    $growthRates = [];
    for ($i = 1; $i < count($sales); $i++) {
        $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100;
        $growthRates[] = round($growth, 2);
    }
    return $growthRates;
}

function forecastNextMonth($sales) {
    $growthRates = calculateGrowthRates($sales);
    $avgGrowthRate = array_sum($growthRates) / count($growthRates);
    $lastMonthSales = end($sales);
    $forecast = $lastMonthSales * (1 + $avgGrowthRate / 100);
    return round($forecast, 2);
}

// 3. Check if a string contains another string
function checkSubstring($mainString, $searchString) {
    if (strpos($mainString, $searchString) !== false) {
        return "The string '$searchString' was found in the main string.";
    } else {
        return "The string '$searchString' was NOT found in the main string.";
    }
}

// 4. Count elements in an array (demonstrating count() and sizeof())
function countElements($array) {
    return "Count using count(): " . count($array) . 
           ", Count using sizeof(): " . sizeof($array);
}

// ----------------------
// Example usage:

// Sum of even numbers
$numbers = [1, 2, 3, 4, 5, 6];
echo "Sum of even numbers: " . sumEvenNumbers($numbers) . "\n\n";

// Sales forecasting
$sales = [1200, 1350, 1420, 1500, 1600, 1720, 1800, 1900, 2050, 2200, 2300, 2450];
echo "Monthly Growth Rates (%): ";
print_r(calculateGrowthRates($sales));
echo "Forecasted sales for next month: " . forecastNextMonth($sales) . "\n\n";

// Check substring
$mainString = "Welcome to the world of PHP programming.";
$searchString = "PHP";
echo checkSubstring($mainString, $searchString) . "\n\n";

// Count elements
$arrayExample = ["apple", "banana", "orange"];
echo countElements($arrayExample);
?>

Output:

Sum of even numbers: 12

Monthly Growth Rates (%): Array
(
    [0] => 12.5
    [1] => 5.19
    [2] => 5.63
    [3] => 6.67
    [4] => 7.5
    [5] => 4.65
    [6] => 5.56
    [7] => 7.89
    [8] => 7.32
    [9] => 4.55
    [10] => 6.52
)
Forecasted sales for next month: 2614.77

The string 'PHP' was found in the main string.

Count using count(): 3, Count using sizeof(): 3

QUESTION 67
<?php
// Input sentence
$sentence = "PHP is great. PHP is easy to learn, and PHP is powerful.";

// Step 1: Convert to lowercase to make counting case-insensitive
$sentence = strtolower($sentence);

// Step 2: Tokenize the sentence into words using regular expressions
// \b\w+\b matches word boundaries (words)
preg_match_all('/\b\w+\b/', $sentence, $matches);
$words = $matches[0];

// Step 3: Count the occurrences of each word
$wordCount = array_count_values($words);

// Step 4: Display the results
echo "Word Occurrences:\n";
foreach ($wordCount as $word => $count) {
    echo "$word => $count\n";
}
?>

Output:

Word Occurrences:
php => 3
is => 3
great => 1
easy => 1
to => 1
learn => 1
and => 1
powerful => 1

QUESTION 68
<?php
// Function to perform division
function divide($a, $b) {
    try {
        if ($b == 0) {
            throw new DivisionByZeroError("Cannot divide by zero.");
        }
        $result = $a / $b;
        echo "Result: $result\n";
    } catch (DivisionByZeroError $e) {
        echo "Error: " . $e->getMessage() . "\n";
    }
}

// Example usage
divide(10, 2); // Normal division
divide(10, 0); // Division by zero
?>

Output:

Result: 5
Error: Cannot divide by zero.

QUESTION 69
<?php
// Function to convert array values to upper or lower case
function changeArrayCase($array, $case = 'lower') {
    if ($case === 'lower') {
        return array_map('strtolower', $array); // Convert all values to lower case
    } elseif ($case === 'upper') {
        return array_map('strtoupper', $array); // Convert all values to upper case
    } else {
        return $array; // Return unchanged if invalid case type
    }
}

// Sample array
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');

// Convert to lower case
$lowerCaseArray = changeArrayCase($Color, 'lower');
echo "Values are in lower case.\n";
print_r($lowerCaseArray);

// Convert to upper case
$upperCaseArray = changeArrayCase($Color, 'upper');
echo "Values are in upper case.\n";
print_r($upperCaseArray);
?>

Output:

Values are in lower case.
Array
(
    [A] => blue
    [B] => green
    [c] => red
)
Values are in upper case.
Array
(
    [A] => BLUE
    [B] => GREEN
    [c] => RED
)

QUESTION 70
<?php
// ===========================
// 1. Take input from user (CLI version)
echo "Enter numbers separated by spaces: ";
$handle = fopen("php://stdin", "r");
$line = fgets($handle);
fclose($handle);
$numbers = array_map('intval', explode(' ', trim($line)));
echo "You entered: ";
print_r($numbers);
echo "\n";

// ===========================
// 2. Sum of even numbers
function sumEvenNumbers($array) {
    $sum = 0;
    foreach ($array as $num) {
        if ($num % 2 == 0) $sum += $num;
    }
    return $sum;
}
echo "Sum of even numbers: " . sumEvenNumbers($numbers) . "\n\n";

// ===========================
// 3. Sales forecasting
$sales = [1200, 1350, 1420, 1500, 1600, 1720, 1800, 1900, 2050, 2200, 2300, 2450];
function calculateGrowthRates($sales) {
    $growthRates = [];
    for ($i = 1; $i < count($sales); $i++) {
        $growthRates[] = round((($sales[$i] - $sales[$i-1]) / $sales[$i-1]) * 100, 2);
    }
    return $growthRates;
}
function forecastNextMonth($sales) {
    $growthRates = calculateGrowthRates($sales);
    $avgGrowth = array_sum($growthRates) / count($growthRates);
    return round(end($sales) * (1 + $avgGrowth/100), 2);
}
echo "Sales Growth Rates: ";
print_r(calculateGrowthRates($sales));
echo "Next Month Sales Forecast: " . forecastNextMonth($sales) . "\n\n";

// ===========================
// 4. Check if a string contains another string
function checkSubstring($mainString, $searchString) {
    return (strpos($mainString, $searchString) !== false) 
        ? "The string '$searchString' was found in the main string." 
        : "The string '$searchString' was NOT found in the main string.";
}
$mainString = "Welcome to the world of PHP programming.";
$searchString = "PHP";
echo checkSubstring($mainString, $searchString) . "\n\n";

// ===========================
// 5. Count elements in an array
function countElements($array) {
    return "Count using count(): " . count($array) . ", Count using sizeof(): " . sizeof($array);
}
echo countElements($numbers) . "\n\n";

// ===========================
// 6. Change array values to upper or lower case
function changeArrayCase($array, $case='lower') {
    if ($case === 'lower') return array_map('strtolower', $array);
    if ($case === 'upper') return array_map('strtoupper', $array);
    return $array;
}
$Color = ['A'=>'Blue','B'=>'Green','c'=>'Red'];
echo "Lower case array:\n"; print_r(changeArrayCase($Color,'lower'));
echo "Upper case array:\n"; print_r(changeArrayCase($Color,'upper'));
echo "\n";

// ===========================
// 7. Word tokenization and count occurrences
$sentence = "PHP is great. PHP is easy to learn, and PHP is powerful.";
$sentence = strtolower($sentence);
preg_match_all('/\b\w+\b/', $sentence, $matches);
$words = $matches[0];
$wordCount = array_count_values($words);
echo "Word occurrences:\n";
print_r($wordCount);
echo "\n";

// ===========================
// 8. Division with error handling
function divide($a, $b) {
    try {
        if ($b == 0) throw new DivisionByZeroError("Cannot divide by zero.");
        echo "Result of $a / $b = " . ($a/$b) . "\n";
    } catch (DivisionByZeroError $e) {
        echo "Error: " . $e->getMessage() . "\n";
    }
}
divide(10,2);
divide(10,0);
?>

Output:
Enter numbers separated by spaces: 
Error: Command failed: timeout 7 php HelloWorld.php

QUESTION 71
<?php
// Example file name
$filename = "example.txt";

// Writing to a file using 'w' mode (creates or overwrites)
$file = fopen($filename, "w");
fwrite($file, "This is written in 'w' mode.\n");
fclose($file);

// Reading from a file using 'r' mode
$file = fopen($filename, "r");
echo "Reading with 'r' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// Appending to a file using 'a' mode
$file = fopen($filename, "a");
fwrite($file, "This is appended in 'a' mode.\n");
fclose($file);

// Reading and writing using 'r+' mode
$file = fopen($filename, "r+");
fwrite($file, "Updated text at the beginning.\n");
rewind($file);
echo "\nReading with 'r+' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// Creating a file only if it does not exist using 'x' mode
$newFile = "newfile.txt";
$file = fopen($newFile, "x");
fwrite($file, "This file is created in 'x' mode.\n");
fclose($file);

echo "\nAll file handling modes demonstrated successfully!";
?>

Output:

PHP Warning:  fopen(example.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 6
PHP Fatal error:  Uncaught TypeError: fwrite(): Argument #1 ($stream) must be of type resource, false given in /HelloWorld.php:7
Stack trace:
#0 /HelloWorld.php(7): fwrite()
#1 {main}
  thrown in /HelloWorld.php on line 7

QUESTION 72
<?php
// Start the session
session_start();

// (i) Equivalent to session_register() - Assign values to session variables
$_SESSION['username'] = "Indira";
$_SESSION['role'] = "Admin";
echo "<b>Session variables have been set:</b><br>";
echo "Username: " . $_SESSION['username'] . "<br>";
echo "Role: " . $_SESSION['role'] . "<br><br>";

// (ii) session_unset() - Removes all session variables but keeps the session alive
session_unset();
echo "<b>After session_unset():</b><br>";
if (empty($_SESSION)) {
    echo "All session variables are now removed (session still active).<br><br>";
}

// (iii) session_destroy() - Completely ends the session
session_destroy();
echo "<b>After session_destroy():</b><br>";
echo "Session destroyed successfully.<br>";
?>

Output:
<b>Session variables have been set:</b><br>Username: Indira<br>Role: Admin<br><br><b>After session_unset():</b><br>All session variables are now removed (session still active).<br><br><b>After session_destroy():</b><br>Session destroyed successfully.<br>

QUESTION 73
<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Check if a file was uploaded without errors
    if (isset($_FILES['image']) && $_FILES['image']['error'] === 0) {
        $fileType = strtolower(pathinfo($_FILES['image']['name'], PATHINFO_EXTENSION));

        // Allow only jpg and png
        if ($fileType === "jpg" || $fileType === "jpeg" || $fileType === "png") {
            echo "<p style='color:green;'>File uploaded successfully: " . htmlspecialchars($_FILES['image']['name']) . "</p>";
        } else {
            echo "<p style='color:red;'>Error: Only JPG and PNG files are allowed.</p>";
        }
    } else {
        echo "<p style='color:red;'>Error: Please select a file to upload.</p>";
    }
}
?>

<!-- Simple HTML Form -->
<form method="post" enctype="multipart/form-data">
    Select a JPG or PNG file:
    <input type="file" name="image" required>
    <input type="submit" value="Upload">
</form>

Output:

<!-- Simple HTML Form -->
<form method="post" enctype="multipart/form-data">
    Select a JPG or PNG file:
    <input type="file" name="image" required>
    <input type="submit" value="Upload">
</form>

PHP Warning:  Undefined array key "REQUEST_METHOD" in /HelloWorld.php on line 2

QUESTION 74
<?php
// ====== WRITING TO A FILE ======
$filename = "sample.txt";

// 1. Writing using fopen + fwrite
$file = fopen($filename, "w"); // "w" mode creates/overwrites the file
fwrite($file, "Hello, this is the first line.\n");
fwrite($file, "This is the second line.\n");
fclose($file);

// 2. Appending using file_put_contents
file_put_contents($filename, "This line is appended at the end.\n", FILE_APPEND);

echo "<b>Data written to file successfully.</b><br><br>";

// ====== READING FROM A FILE ======

// Method 1: Reading the whole file using file_get_contents()
echo "<b>Reading using file_get_contents():</b><br>";
$content = file_get_contents($filename);
echo nl2br($content) . "<br><br>";

// Method 2: Reading line-by-line using fopen + fgets
echo "<b>Reading line-by-line using fopen + fgets:</b><br>";
$file = fopen($filename, "r");
while (!feof($file)) {
    echo fgets($file) . "<br>";
}
fclose($file);

// Method 3: Reading file into an array using file()
echo "<br><b>Reading into an array using file():</b><br>";
$lines = file($filename);
foreach ($lines as $line) {
    echo htmlspecialchars($line) . "<br>";
}
?>

Output:

PHP Warning:  fopen(sample.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 6
PHP Fatal error:  Uncaught TypeError: fwrite(): Argument #1 ($stream) must be of type resource, false given in /HelloWorld.php:7
Stack trace:
#0 /HelloWorld.php(7): fwrite()
#1 {main}
  thrown in /HelloWorld.php on line 7

QUESTION 75
<?php
function appendLineToFile($filename, $newLine) {
    // Ensure the line ends with a newline character
    $newLine = rtrim($newLine) . PHP_EOL;

    // Append the line to the file
    if (file_put_contents($filename, $newLine, FILE_APPEND) !== false) {
        echo "Line appended successfully to {$filename}.<br>";
    } else {
        echo "Error: Unable to append line to {$filename}.<br>";
    }
}

// Example usage
$filename = "myfile.txt";
appendLineToFile($filename, "This is the first new line");
appendLineToFile($filename, "This is another line");
?>

Output:

Error: Unable to append line to myfile.txt.<br>Error: Unable to append line to myfile.txt.<br>
PHP Warning:  file_put_contents(myfile.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 7
PHP Warning:  file_put_contents(myfile.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 7

QUESTION 76
<?php
// Function to calculate days until next birthday
function daysUntilBirthday($month, $day) {
    $currentYear = date("Y");
    $today = new DateTime();
    $birthday = new DateTime("$currentYear-$month-$day");

    // If birthday already passed this year, use next year
    if ($birthday < $today) {
        $birthday->modify('+1 year');
    }

    $interval = $today->diff($birthday);
    return $interval->days;
}

// Example: Birthday on 25th December
$month = 12;
$day = 25;

$daysLeft = daysUntilBirthday($month, $day);
echo "Your birthday is in <b>$daysLeft</b> day(s)!";
?>

Output:
Your birthday is in <b>131</b> day(s)!

QUESTION 77
<?php
echo "<h3>1. Hostname and IP Address Functions</h3>";
$domain = "example.com";
$ip = "93.184.216.34";

echo "IP of $domain: " . gethostbyname($domain) . "<br>";
echo "Hostname for IP $ip: " . gethostbyaddr($ip) . "<br>";
echo "All IPs of $domain: ";
print_r(gethostbynamel($domain));
echo "<br>Current Server Hostname: " . gethostname() . "<br>";

echo "<hr><h3>2. DNS Functions</h3>";
if (checkdnsrr($domain, "MX")) {
    echo "$domain has an MX record.<br>";
} else {
    echo "$domain does not have an MX record.<br>";
}
echo "DNS Records for $domain:<br>";
print_r(dns_get_record($domain));

echo "<hr><h3>3. Protocol and Service Functions</h3>";
echo "Protocol number for TCP: " . getprotobyname("tcp") . "<br>";
echo "Protocol name for 6: " . getprotobynumber(6) . "<br>";
echo "Port number for HTTP: " . getservbyname("http", "tcp") . "<br>";
echo "Service name for port 80: " . getservbyport(80, "tcp") . "<br>";

echo "<hr><h3>4. Socket and Connection Functions</h3>";
$fp = @fsockopen($domain, 80, $errno, $errstr, 5);
if ($fp) {
    echo "Connected successfully to $domain on port 80.<br>";
    fclose($fp);
} else {
    echo "Connection failed: $errstr ($errno)<br>";
}
?>

Output:

<h3>1. Hostname and IP Address Functions</h3>IP of example.com: example.com<br>Hostname for IP 93.184.216.34: 93.184.216.34<br>All IPs of example.com: <br>Current Server Hostname: 3de04d470e50<br><hr><h3>2. DNS Functions</h3>example.com does not have an MX record.<br>DNS Records for example.com:<br><hr><h3>3. Protocol and Service Functions</h3>Protocol number for TCP: 6<br>Protocol name for 6: tcp<br>Port number for HTTP: 80<br>Service name for port 80: http<br><hr><h3>4. Socket and Connection Functions</h3>Connection failed: php_network_getaddresses: getaddrinfo for example.com failed: Temporary failure in name resolution (0)<br>
PHP Warning:  dns_get_record(): A temporary server error occurred. in /HelloWorld.php on line 19

QUESTION 78
<?php
// Step 1: Set a cookie if it doesn't exist
if (!isset($_COOKIE['username'])) {
    setcookie("username", "Indira", time() + 3600, "/"); // Expires in 1 hour
    echo "Cookie 'username' has been set.<br>";
    echo "Refresh the page to read the cookie.<br>";
} else {
    // Step 2: Read the cookie
    echo "Cookie 'username' value: " . $_COOKIE['username'] . "<br>";

    // Step 3: Delete the cookie
    setcookie("username", "", time() - 3600, "/");
    echo "Cookie 'username' has been deleted.<br>";
}
?>

Output:
Cookie 'username' has been set.<br>Refresh the page to read the cookie.<br>

QUESTION 79
<?php
// File names
$file1 = "file1.txt";
$file2 = "file2.txt";
$finalFile = "combined.txt";

// Read contents of first file
$content1 = file_get_contents($file1);

// Read contents of second file
$content2 = file_get_contents($file2);

// Combine and append into final file
if (file_put_contents($finalFile, $content1 . PHP_EOL . $content2, FILE_APPEND) !== false) {
    echo "Files '$file1' and '$file2' have been appended to '$finalFile' successfully.";
} else {
    echo "Error: Could not append files.";
}
?>

Output:

Error: Could not append files.
PHP Warning:  file_get_contents(file1.txt): Failed to open stream: No such file or directory in /HelloWorld.php on line 8
PHP Warning:  file_get_contents(file2.txt): Failed to open stream: No such file or directory in /HelloWorld.php on line 11
PHP Warning:  file_put_contents(combined.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 14

QUESTION 80
<?php
// Create a cookie named "TestCookie" with value "HelloWorld"
// Cookie will expire in 1 hour (3600 seconds) from now
setcookie("TestCookie", "HelloWorld", time() + 3600, "/");

// Display message
echo "Test cookie 'TestCookie' has been set.<br>";

// Check if cookie is available (will be available only after page refresh)
if (isset($_COOKIE['TestCookie'])) {
    echo "Cookie value: " . $_COOKIE['TestCookie'];
} else {
    echo "Please refresh the page to see the cookie value.";
}
?>

Output:
Test cookie 'TestCookie' has been set.<br>Please refresh the page to see the cookie value.


QUESTION 82

INPUT:

<?php
// 1. Simple cookie (name, value)
setcookie("user", "Indira");

// 2. Cookie with expiry time (1 hour from now)
setcookie("theme", "dark", time() + 3600);

// 3. Cookie with expiry time and path
setcookie("language", "English", time() + 3600, "/");

// 4. Cookie with expiry time, path, and domain
setcookie("country", "India", time() + 3600, "/", "localhost");

// 5. Cookie with secure and httponly flags
setcookie("secure_cookie", "This is secure", time() + 3600, "/", "", true, true);

// Display all cookies (will be available on next page load)
echo "<h2>Cookie Setting Example</h2>";
echo "<p>Cookies have been sent to the browser. Refresh the page to see stored cookies.</p>";

if (!empty($_COOKIE)) {
    echo "<h3>Stored Cookies:</h3>";
    echo "<pre>";
    print_r($_COOKIE);
    echo "</pre>";
} else {
    echo "<p>No cookies available yet. Please refresh.</p>";
}
?>

Output:
<h2>Cookie Setting Example</h2><p>Cookies have been sent to the browser. Refresh the page to see stored cookies.</p><p>No cookies available yet. Please refresh.</p>


QUESTION 84

INPUT:

<?php
// Start the session
session_start();

// Step 1: Set session values
if (!isset($_SESSION['username'])) {
    $_SESSION['username'] = "Indira";
    $_SESSION['role'] = "Admin";
    echo "<p>✅ Session variables have been set.</p>";
}

// Step 2: Display session values
echo "<h3>Session Data:</h3>";
if (!empty($_SESSION)) {
    echo "<pre>";
    print_r($_SESSION);
    echo "</pre>";
} else {
    echo "<p>No session data found.</p>";
}

// Step 3: Remove a specific session variable
if (isset($_GET['remove'])) {
    unset($_SESSION['role']); // Removes 'role' only
    echo "<p>⚠️ 'role' session variable removed.</p>";
}

// Step 4: Destroy the session completely
if (isset($_GET['destroy'])) {
    session_unset();     // Remove all session variables
    session_destroy();   // Destroy the session
    echo "<p>❌ All session data has been cleared and session destroyed.</p>";
}
?>

<hr>
<!-- Links to test removal and destruction -->
<a href="?remove=1">Remove 'role' from session</a> | 
<a href="?destroy=1">Destroy Session</a>

Output:

<p>✅ Session variables have been set.</p><h3>Session Data:</h3><pre>Array
(
    [username] => Indira
    [role] => Admin
)
</pre>
<hr>
<!-- Links to test removal and destruction -->
<a href="?remove=1">Remove 'role' from session</a> | 
<a href="?destroy=1">Destroy Session</a>

QUESTION 85

INPUT:

<?php
// Function to extract file information from a given path
function getFileDetails($path) {
    // Get file name with extension
    $filename = basename($path);

    // Get file name without extension
    $nameWithoutExt = pathinfo($path, PATHINFO_FILENAME);

    // Get file extension
    $extension = pathinfo($path, PATHINFO_EXTENSION);

    // Display results
    echo "Full Path: $path<br>";
    echo "File Name (with extension): $filename<br>";
    echo "File Name (without extension): $nameWithoutExt<br>";
    echo "File Extension: $extension<br>";
}

// Example usage
$filePath = "/var/www/html/uploads/myfile.txt";
getFileDetails($filePath);
?>

Output:
Full Path: /var/www/html/uploads/myfile.txt<br>File Name (with extension): myfile.txt<br>File Name (without extension): myfile<br>File Extension: txt<br>

QUESTION 86

INPUT:

<?php
$filename = "sample.txt";

// 1. Create and write to file using fopen & fwrite
$file = fopen($filename, "w");
fwrite($file, "Hello, this is a test file.\n");
fwrite($file, "This is the second line.\n");
fclose($file);
echo "File created and written successfully.<br>";

// 2. Read file using fopen & fread
if (file_exists($filename)) {
    $file = fopen($filename, "r");
    $contents = fread($file, filesize($filename));
    fclose($file);
    echo "<strong>File Contents:</strong><br><pre>$contents</pre>";
}

// 3. Append content to file
$file = fopen($filename, "a");
fwrite($file, "This line is appended.\n");
fclose($file);
echo "Content appended successfully.<br>";

// 4. Read entire file using file_get_contents
echo "<strong>Updated File:</strong><br>";
echo nl2br(file_get_contents($filename));

// 5. Copy file
copy($filename, "sample_copy.txt");
echo "<br>File copied as sample_copy.txt.<br>";

// 6. Rename file
rename("sample_copy.txt", "renamed_sample.txt");
echo "File renamed to renamed_sample.txt.<br>";

// 7. Delete renamed file
unlink("renamed_sample.txt");
echo "Renamed file deleted.<br>";
?>

Output:

PHP Warning:  fopen(sample.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 5
PHP Fatal error:  Uncaught TypeError: fwrite(): Argument #1 ($stream) must be of type resource, false given in /HelloWorld.php:6
Stack trace:
#0 /HelloWorld.php(6): fwrite()
#1 {main}
  thrown in /HelloWorld.php on line 6


QUESTION 88

INPUT:

<?php
// Set your birthday (format: month/day)
$birthday = "11-25"; // Example: 25th November

// Current year
$currentYear = date("Y");

// Create DateTime objects for current date and birthday
$today = new DateTime();
$birthdayDate = new DateTime($currentYear . "-" . $birthday);

// If birthday has already passed this year, set it for next year
if ($today > $birthdayDate) {
    $birthdayDate->modify('+1 year');
}

// Calculate the difference
$interval = $today->diff($birthdayDate);
$daysLeft = $interval->days;

// Display the countdown
echo "Today is: " . $today->format("Y-m-d") . "<br>";
echo "Your birthday is on: " . $birthdayDate->format("Y-m-d") . "<br>";
echo "🎉 Days until your birthday: <b>$daysLeft</b> days!";
?>

Output:
Today is: 2025-08-15<br>Your birthday is on: 2025-11-25<br>🎉 Days until your birthday: <b>101</b> days!

QUESTION 89

INPUT:

<?php
// File name
$filename = "example.txt";

// Check if the file exists
if (file_exists($filename)) {
    // Open the file in read mode
    $file = fopen($filename, "r") or die("Unable to open file!");

    echo "<h3>File Contents:</h3>";

    // Read until end of file
    while (!feof($file)) {
        echo fgets($file) . "<br>"; // Reads line by line
    }

    // Close the file
    fclose($file);
} else {
    echo "File '$filename' does not exist.";
}
?>

Output:
File 'example.txt' does not exist.

QUESTION 90

INPUT:

<?php
// File name
$filename = "example.txt";

// Check if file exists
if (file_exists($filename)) {
    // Open the file in read mode
    $file = fopen($filename, "r") or die("Unable to open file!");

    // Read the entire file contents
    $contents = fread($file, filesize($filename));

    // Display the contents
    echo "<h3>File Contents:</h3>";
    echo nl2br($contents); // nl2br() converts newlines to <br> for HTML

    // Close the file
    fclose($file);
} else {
    echo "File '$filename' not found!";
}
?>

Output:
File 'example.txt' not found!

QUESTION 91

INPUT:

<?php
// Start the session
session_start();

// Store some data in the session
$_SESSION['username'] = 'Indira';
$_SESSION['role'] = 'Admin';

// Display the session ID
echo "<h3>Session ID:</h3> " . session_id();

// Display where sessions are stored on the server
echo "<h3>Session Save Path:</h3> " . session_save_path();

// Display all session data
echo "<h3>Session Data:</h3>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";
?>

Output:

<h3>Session ID:</h3> 71h6ce9hm97c5knstpmpj8setu<h3>Session Save Path:</h3> /var/lib/php/sessions<h3>Session Data:</h3><pre>Array
(
    [username] => Indira
    [role] => Admin
)
</pre>

QUESTION 92

INPUT:

<?php
// Step 1: Create/Set Cookie (valid for 1 hour)
setcookie("username", "Indira", time() + 3600, "/"); // Must be before HTML output

// Step 2: Display Cookie Value (if it exists)
if (isset($_COOKIE['username'])) {
    echo "<h3>Cookie Value:</h3> " . $_COOKIE['username'];
} else {
    echo "<h3>Cookie not found or expired.</h3>";
}

// Step 3: Delete Cookie (Uncomment to test deletion)
// setcookie("username", "", time() - 3600, "/");
// echo "<br><strong>Cookie Deleted!</strong>";
?>

Output:
<h3>Cookie not found or expired.</h3>

QUESTION 93

INPUT:

<?php
// File name
$filename = "example.txt";

// Check if file exists
if (file_exists($filename)) {
    // Open the file in read mode
    $file = fopen($filename, "r") or die("Unable to open file!");

    // Read the entire file contents
    $contents = fread($file, filesize($filename));

    // Display the contents
    echo "<h3>File Contents:</h3>";
    echo nl2br($contents); // nl2br() converts newlines to <br> for HTML

    // Close the file
    fclose($file);
} else {
    echo "File '$filename' not found!";
}
?>

Output:
<h2>You have visited this page 1 time(s).</h2>

QUESTION 94

INPUT:

<?php
// Combined demonstration of all PHP file handling modes

$filename = "example.txt";

// --------------------
// 1. "w" mode - Write Only
// --------------------
$file = fopen($filename, "w") or die("Unable to open file in w mode!");
fwrite($file, "This is written in 'w' mode.\n");
fclose($file);

// --------------------
// 2. "r" mode - Read Only
// --------------------
$file = fopen($filename, "r") or die("Unable to open file in r mode!");
echo "Reading with 'r' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// --------------------
// 3. "a" mode - Append Only
// --------------------
$file = fopen($filename, "a") or die("Unable to open file in a mode!");
fwrite($file, "This is appended in 'a' mode.\n");
fclose($file);

// --------------------
// 4. "r+" mode - Read & Write
// --------------------
$file = fopen($filename, "r+") or die("Unable to open file in r+ mode!");
fwrite($file, "Updated text at the beginning.\n");
rewind($file);
echo "\nReading with 'r+' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// --------------------
// 5. "w+" mode - Write & Read
// --------------------
$file = fopen($filename, "w+") or die("Unable to open file in w+ mode!");
fwrite($file, "This file is opened in 'w+' mode.\n");
rewind($file);
echo "\nReading with 'w+' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// --------------------
// 6. "a+" mode - Append & Read
// --------------------
$file = fopen($filename, "a+") or die("Unable to open file in a+ mode!");
fwrite($file, "Appended with 'a+' mode.\n");
rewind($file);
echo "\nReading with 'a+' mode:\n";
echo fread($file, filesize($filename));
fclose($file);

// --------------------
// 7. "x" mode - Create & Write (fails if exists)
// --------------------
$newFile = "newfile.txt";
if (!file_exists($newFile)) {
    $file = fopen($newFile, "x") or die("Unable to create file in x mode!");
    fwrite($file, "This file is created in 'x' mode.\n");
    fclose($file);
    echo "\nFile 'newfile.txt' created successfully with 'x' mode.\n";
} else {
    echo "\nFile 'newfile.txt' already exists. 'x' mode skipped.\n";
}

// --------------------
// 8. "x+" mode - Create & Read/Write
// --------------------
$anotherFile = "anotherfile.txt";
if (!file_exists($anotherFile)) {
    $file = fopen($anotherFile, "x+") or die("Unable to create file in x+ mode!");
    fwrite($file, "Created with 'x+' mode.\n");
    rewind($file);
    echo "\nReading from 'x+' mode file:\n";
    echo fread($file, filesize($anotherFile));
    fclose($file);
} else {
    echo "\nFile 'anotherfile.txt' already exists. 'x+' mode skipped.\n";
}

echo "\n\nAll file handling modes demonstrated successfully!";
?>

Output:

Unable to open file in w mode!
PHP Warning:  fopen(example.txt): Failed to open stream: Permission denied in /HelloWorld.php on line 9

QUESTION 94

INPUT:

<?php
session_start(); // Start or resume session

// Initialize shopping cart if not already
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Add an item to the cart
if (isset($_GET['item']) && !empty($_GET['item'])) {
    $item = htmlspecialchars($_GET['item']); // Prevent XSS
    $_SESSION['cart'][] = $item;
    echo "<p>✅ Item '<b>$item</b>' added to your cart.</p>";
}

// Remove an item from the cart
if (isset($_GET['remove']) && is_numeric($_GET['remove'])) {
    $index = $_GET['remove'];
    if (isset($_SESSION['cart'][$index])) {
        $removed = $_SESSION['cart'][$index];
        unset($_SESSION['cart'][$index]);
        $_SESSION['cart'] = array_values($_SESSION['cart']); // Re-index array
        echo "<p>❌ Item '<b>$removed</b>' removed from your cart.</p>";
    }
}

// Empty the cart
if (isset($_GET['empty'])) {
    $_SESSION['cart'] = [];
    echo "<p>🛒 Your cart is now empty.</p>";
}

// Display the cart
echo "<h3>Your Shopping Cart</h3>";
if (count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $index => $product) {
        echo "<li>$product 
              <a href='?remove=$index'>[Remove]</a></li>";
    }
    echo "</ul>";
    echo "<a href='?empty=true'>Empty Cart</a>";
} else {
    echo "<p>Your cart is empty.</p>";
}

// Add item form
?>
<hr>
<form method="get">
    <label>Enter Item Name:</label>
    <input type="text" name="item" required>
    <button type="submit">Add to Cart</button>
</form>

Output:

<h3>Your Shopping Cart</h3><p>Your cart is empty.</p><hr>
<form method="get">
    <label>Enter Item Name:</label>
    <input type="text" name="item" required>
    <button type="submit">Add to Cart</button>
</form>

QUESTION 97
<?php
// Set custom session name and cookie parameters before starting the session
session_name("MYSESSION");
session_set_cookie_params(3600, "/", "", false, true);

// Start session
session_start();

// Display current session ID and name
echo "<h3>Session Details</h3>";
echo "Session Name: " . session_name() . "<br>";
echo "Session ID: " . session_id() . "<br>";

// Store session variables
$_SESSION['username'] = "JohnDoe";
$_SESSION['email'] = "john@example.com";

// Display stored variables
echo "<h3>Stored Session Variables</h3>";
echo "Username: " . $_SESSION['username'] . "<br>";
echo "Email: " . $_SESSION['email'] . "<br>";

// Regenerate session ID for security
session_regenerate_id(true);
echo "<p>New Session ID after regeneration: " . session_id() . "</p>";

// Display cookie parameters
echo "<h3>Session Cookie Parameters</h3>";
print_r(session_get_cookie_params());

// Example of unsetting variables
if (isset($_GET['unset'])) {
    session_unset();
    echo "<p>All session variables have been removed.</p>";
}

// Example of destroying session
if (isset($_GET['destroy'])) {
    session_destroy();
    echo "<p>Session destroyed. Reload page to start a new session.</p>";
}

// Links for testing
echo "<hr>";
echo '<a href="?unset=1">Unset Session Variables</a><br>';
echo '<a href="?destroy=1">Destroy Session</a>';
?>

Output:

<h3>Session Details</h3>Session Name: MYSESSION<br>Session ID: v5uj0pq8q3cobg5sm8mr00g08t<br><h3>Stored Session Variables</h3>Username: JohnDoe<br>Email: john@example.com<br><p>New Session ID after regeneration: v5uj0pq8q3cobg5sm8mr00g08t</p><h3>Session Cookie Parameters</h3>Array
(
    [lifetime] => 3600
    [path] => /
    [domain] => 
    [secure] => 
    [httponly] => 1
    [samesite] => 
)
<hr><a href="?unset=1">Unset Session Variables</a><br><a href="?destroy=1">Destroy Session</a>
PHP Warning:  session_regenerate_id(): Session ID cannot be regenerated after headers have already been sent in /HelloWorld.php on line 24

QUESTION 98
<?php
session_start();

// Restrict access if not logged in
if (!isset($_SESSION['admin_username'])) {
    header("Location: admin_login.php");
    exit();
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Admin Dashboard</title>
</head>
<body>
    <h2>Welcome, <?php echo $_SESSION['admin_username']; ?>!</h2>
    <p>This is the secure Admin Dashboard.</p>
    <a href="logout.php">Logout</a>
</body>
</html>

Output:
Program did not output anything!

QUESTION 99
<?php
session_start(); // (a) Initiate or resume session

// (b) & (c) & (d) - Visit Counter
if (!isset($_SESSION['visit_count'])) {
    $_SESSION['visit_count'] = 1; // First visit
} else {
    $_SESSION['visit_count']++; // Increment on each visit
}

echo "<h2>You have visited this page " . $_SESSION['visit_count'] . " time(s).</h2>";

// (e) - Link back to the page with session ID
echo "<p><a href='" . $_SERVER['PHP_SELF'] . "?".SID."'>Reload Page with Session ID</a></p>";

// (f) File Upload Restriction
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_FILES["fileToUpload"])) {
    $target_dir = "uploads/"; // Make sure this folder exists and is writable
    $file_name = basename($_FILES["fileToUpload"]["name"]);
    $target_file = $target_dir . $file_name;

    // Check if file already exists
    if (file_exists($target_file)) {
        echo "<p style='color:red;'>Error: File '$file_name' already exists. Please upload a different file.</p>";
    } else {
        // Try to move uploaded file
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
            echo "<p style='color:green;'>File '$file_name' uploaded successfully.</p>";
        } else {
            echo "<p style='color:red;'>Error uploading file. Please try again.</p>";
        }
    }
}
?>

<!-- HTML Form for File Upload -->
<h3>Upload a File</h3>
<form action="" method="post" enctype="multipart/form-data">
    Select file to upload:
    <input type="file" name="fileToUpload" required>
    <input type="submit" value="Upload File">
</form>

QUESTION 100
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_FILES["fileToUpload"])) {
    $target_dir = "uploads/";  // Folder to store files
    $file_name = basename($_FILES["fileToUpload"]["name"]);
    $target_file = $target_dir . $file_name;

    // Create folder if it doesn't exist
    if (!file_exists($target_dir)) {
        mkdir($target_dir, 0777, true);
    }

    // Check if file already exists
    if (file_exists($target_file)) {
        echo "<p style='color:red;'>Error: The file '$file_name' already exists. Please upload a different file.</p>";
    } 
    else {
        // Move uploaded file to target directory
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
            echo "<p style='color:green;'>Success: File '$file_name' uploaded successfully.</p>";
        } 
        else {
            echo "<p style='color:red;'>Error: There was a problem uploading your file.</p>";
        }
    }
}
?>

<!-- HTML Form -->
<h2>Upload a File</h2>
<form action="" method="post" enctype="multipart/form-data">
    Select file: <input type="file" name="fileToUpload" required>
    <input type="submit" value="Upload File">
</form>

QUESTION 101
<?php
// Step 1: Set the cookie (name: user, value: Indira, expires in 1 hour)
setcookie("user", "Indira", time() + 3600, "/");

// Step 2: Retrieve the cookie value (only available on next page load)
if (isset($_COOKIE["user"])) {
    echo "Cookie value is: " . $_COOKIE["user"];
} else {
    echo "Cookie is not set yet.";
}
?>

Output:
Cookie is not set yet.

QUESTION 102
<?php
// Start the session
session_start();

// Set session variables
$_SESSION["username"] = "Indira";
$_SESSION["role"] = "Admin";

// Display session variables
echo "Session variables have been set.<br>";
echo "Username: " . $_SESSION["username"] . "<br>";
echo "Role: " . $_SESSION["role"] . "<br>";

// Check if a session variable exists
if (isset($_SESSION["username"])) {
    echo "Welcome back, " . $_SESSION["username"] . "!";
} else {
    echo "No session data found.";
}
?>

Output:
Session variables have been set.<br>Username: Indira<br>Role: Admin<br>Welcome back, Indira!

QUESTION 103
<?php
// Start session to store pageview count
session_start();

// Check if 'pageview' exists in session
if (isset($_SESSION['pageview'])) {
    $_SESSION['pageview'] += 1; // Increment if it exists
} else {
    $_SESSION['pageview'] = 1;  // Initialize if not exists
}

// Display the pageview count
echo "<h2>Page View Counter</h2>";
echo "You have visited this page " . $_SESSION['pageview'] . " time(s).";
?>

Output:
<h2>Page View Counter</h2>You have visited this page 1 time(s).

QUESTION 104
<?php
$filename = "example.txt"; // Replace with your file name
$n = 3; // Change this to the line number you want to read (nth line)

// Check if file exists
if (!file_exists($filename)) {
    die("File does not exist.");
}

// Read all lines into an array
$lines = file($filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

// Check if nth line exists
if (isset($lines[$n - 1])) { // Arrays are 0-indexed
    echo "Line $n: " . $lines[$n - 1];
} else {
    echo "No data";
}
?>

Output:
File does not exist.

QUESTION 105
<?php
function getStartAndEndDateOfWeek($weekNumber, $year) {
    // Ensure week number and year are integers
    $weekNumber = intval($weekNumber);
    $year = intval($year);

    // Get timestamp for the first day of the given week
    $dto = new DateTime();
    $dto->setISODate($year, $weekNumber);

    // Start date (Monday)
    $startDate = $dto->format('Y-m-d');

    // End date (Sunday)
    $dto->modify('+6 days');
    $endDate = $dto->format('Y-m-d');

    return array('start_date' => $startDate, 'end_date' => $endDate);
}

// Example usage:
$weekDates = getStartAndEndDateOfWeek(33, 2025);
echo "Week 33 of 2025 starts on " . $weekDates['start_date'] . " and ends on " . $weekDates['end_date'];
?>

Output:
Week 33 of 2025 starts on 2025-08-11 and ends on 2025-08-17




















